/-
Copyright (c) 2024 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne
-/
import Mathlib.MeasureTheory.Measure.Stieltjes
import Mathlib.MeasureTheory.Decomposition.RadonNikodym
import Mathlib.MeasureTheory.Constructions.Prod.Basic

/-!


-/


open MeasureTheory Set Filter TopologicalSpace

open scoped NNReal ENNReal MeasureTheory Topology

namespace ProbabilityTheory

variable {Œ± Œ≤ Œπ : Type*} [MeasurableSpace Œ±]

section IsCDFLike

structure IsCDFLike (f : Œ± ‚Üí ‚Ñö ‚Üí ‚Ñù) : Prop where
  mono : ‚àÄ a, Monotone (f a)
  nonneg : ‚àÄ a q, 0 ‚â§ f a q
  le_one : ‚àÄ a q, f a q ‚â§ 1
  tendsto_atTop_one : ‚àÄ a, Tendsto (f a) atTop (ùìù 1)
  tendsto_atBot_zero : ‚àÄ a, Tendsto (f a) atBot (ùìù 0)
  iInf_rat_gt_eq : ‚àÄ a, ‚àÄ t : ‚Ñö, ‚®Ö r : Ioi t, f a r = f a t
  measurable : ‚àÄ q, Measurable (fun a ‚Ü¶ f a q)

lemma IsCDFLike.ite {s : Set Œ±} (hs : MeasurableSet s) [DecidablePred (fun a ‚Ü¶ a ‚àà s)]
    {f g : Œ± ‚Üí ‚Ñö ‚Üí ‚Ñù} (hf : IsCDFLike f) (hg : IsCDFLike g) :
    IsCDFLike (fun a q ‚Ü¶ if a ‚àà s then f a q else g a q) where
  mono a := by split_ifs; exacts [hf.mono a, hg.mono a]
  nonneg a := by split_ifs; exacts [hf.nonneg a, hg.nonneg a]
  le_one a := by split_ifs; exacts [hf.le_one a, hg.le_one a]
  tendsto_atTop_one a := by split_ifs; exacts [hf.tendsto_atTop_one a, hg.tendsto_atTop_one a]
  tendsto_atBot_zero a := by split_ifs; exacts [hf.tendsto_atBot_zero a, hg.tendsto_atBot_zero a]
  iInf_rat_gt_eq a := by split_ifs; exacts [hf.iInf_rat_gt_eq a, hg.iInf_rat_gt_eq a]
  measurable q := Measurable.ite hs (hf.measurable q) (hg.measurable q)

end IsCDFLike

section DefaultRatCDF

def defaultRatCDF (q : ‚Ñö) := if q < 0 then (0 : ‚Ñù) else 1

lemma monotone_defaultRatCDF : Monotone defaultRatCDF := by
  unfold defaultRatCDF
  intro x y hxy
  dsimp only
  split_ifs with h_1 h_2 h_2
  exacts [le_rfl, zero_le_one, absurd (hxy.trans_lt h_2) h_1, le_rfl]

lemma defaultRatCDF_nonneg (q : ‚Ñö) : 0 ‚â§ defaultRatCDF q := by
  unfold defaultRatCDF
  split_ifs
  exacts [le_rfl, zero_le_one]

lemma defaultRatCDF_le_one (q : ‚Ñö) : defaultRatCDF q ‚â§ 1 := by
  unfold defaultRatCDF
  split_ifs <;> simp

lemma tendsto_defaultRatCDF_atTop : Tendsto defaultRatCDF atTop (ùìù 1) := by
  refine (tendsto_congr' ?_).mp tendsto_const_nhds
  rw [EventuallyEq, eventually_atTop]
  exact ‚ü®0, fun q hq => (if_neg (not_lt.mpr hq)).symm‚ü©

lemma tendsto_defaultRatCDF_atBot : Tendsto defaultRatCDF atBot (ùìù 0) := by
  refine (tendsto_congr' ?_).mp tendsto_const_nhds
  rw [EventuallyEq, eventually_atBot]
  refine ‚ü®-1, fun q hq => (if_pos (hq.trans_lt ?_)).symm‚ü©
  linarith

lemma inf_gt_rat_defaultRatCDF (t : ‚Ñö) :
    ‚®Ö r : Ioi t, defaultRatCDF r = defaultRatCDF t := by
  simp only [defaultRatCDF]
  have h_bdd : BddBelow (range fun r : ‚Ü•(Ioi t) ‚Ü¶ ite ((r : ‚Ñö) < 0) (0 : ‚Ñù) 1) := by
    refine' ‚ü®0, fun x hx ‚Ü¶ _‚ü©
    obtain ‚ü®y, rfl‚ü© := mem_range.mpr hx
    dsimp only
    split_ifs
    exacts [le_rfl, zero_le_one]
  split_ifs with h
  ¬∑ refine' le_antisymm _ (le_ciInf fun x ‚Ü¶ _)
    ¬∑ obtain ‚ü®q, htq, hq_neg‚ü© : ‚àÉ q, t < q ‚àß q < 0 := by
        refine' ‚ü®t / 2, _, _‚ü©
        ¬∑ linarith
        ¬∑ linarith
      refine' (ciInf_le h_bdd ‚ü®q, htq‚ü©).trans _
      rw [if_pos]
      rwa [Subtype.coe_mk]
    ¬∑ split_ifs
      exacts [le_rfl, zero_le_one]
  ¬∑ refine' le_antisymm _ _
    ¬∑ refine' (ciInf_le h_bdd ‚ü®t + 1, lt_add_one t‚ü©).trans _
      split_ifs
      exacts [zero_le_one, le_rfl]
    ¬∑ refine' le_ciInf fun x ‚Ü¶ _
      rw [if_neg]
      rw [not_lt] at h ‚ä¢
      exact h.trans (mem_Ioi.mp x.prop).le

lemma measurable_defaultRatCDF (Œ± : Type*) [MeasurableSpace Œ±] (q : ‚Ñö) :
  Measurable (fun (_ : Œ±) ‚Ü¶ defaultRatCDF q) := measurable_const

lemma isCDFLike_defaultRatCDF (Œ± : Type*) [MeasurableSpace Œ±] :
    IsCDFLike (fun (_ : Œ±) (q : ‚Ñö) ‚Ü¶ defaultRatCDF q) where
  mono _ := monotone_defaultRatCDF
  nonneg _ := defaultRatCDF_nonneg
  le_one _ := defaultRatCDF_le_one
  tendsto_atBot_zero _ := tendsto_defaultRatCDF_atBot
  tendsto_atTop_one _ := tendsto_defaultRatCDF_atTop
  iInf_rat_gt_eq _ := inf_gt_rat_defaultRatCDF
  measurable := measurable_defaultRatCDF Œ±

end DefaultRatCDF

variable {f : Œ± ‚Üí ‚Ñö ‚Üí ‚Ñù} (hf : IsCDFLike f)

/-- Conditional cdf of the measure given the value on `Œ±`, as a plain function. This is an auxiliary
definition used to define `cond_cdf`. -/
noncomputable irreducible_def todo1 (f : Œ± ‚Üí ‚Ñö ‚Üí ‚Ñù) : Œ± ‚Üí ‚Ñù ‚Üí ‚Ñù :=
  fun a t ‚Ü¶ ‚®Ö r : { r' : ‚Ñö // t < r' }, f a r

lemma todo1_eq (a : Œ±) (r : ‚Ñö) :
    todo1 f a r = f a r := by
  rw [‚Üê hf.iInf_rat_gt_eq a r, todo1]
  refine' Equiv.iInf_congr _ _
  ¬∑ exact
      { toFun := fun t ‚Ü¶ ‚ü®t.1, mod_cast t.2‚ü©
        invFun := fun t ‚Ü¶ ‚ü®t.1, mod_cast t.2‚ü©
        left_inv := fun t ‚Ü¶ by simp only [Subtype.coe_eta]
        right_inv := fun t ‚Ü¶ by simp only [Subtype.coe_eta] }
  ¬∑ intro t
    simp only [Equiv.coe_fn_mk, Subtype.coe_mk]

theorem todo1_nonneg (a : Œ±) (r : ‚Ñù) : 0 ‚â§ todo1 f a r := by
  have : Nonempty { r' : ‚Ñö // r < ‚Üër' } := by
    obtain ‚ü®r, hrx‚ü© := exists_rat_gt r
    exact ‚ü®‚ü®r, hrx‚ü©‚ü©
  rw [todo1_def]
  exact le_ciInf fun r' ‚Ü¶ hf.nonneg a _

theorem bddBelow_range_gt (a : Œ±) (x : ‚Ñù) :
    BddBelow (range fun r : { r' : ‚Ñö // x < ‚Üër' } ‚Ü¶ f a r) := by
  refine' ‚ü®0, fun z ‚Ü¶ _‚ü©; rintro ‚ü®u, rfl‚ü©; exact hf.nonneg a _

theorem monotone_todo1 (a : Œ±) : Monotone (todo1 f a) := by
  intro x y hxy
  have : Nonempty { r' : ‚Ñö // y < ‚Üër' } := by
    obtain ‚ü®r, hrx‚ü© := exists_rat_gt y
    exact ‚ü®‚ü®r, hrx‚ü©‚ü©
  simp_rw [todo1_def]
  refine' le_ciInf fun r ‚Ü¶ (ciInf_le _ _).trans_eq _
  ¬∑ exact bddBelow_range_gt hf a x
  ¬∑ exact ‚ü®r.1, hxy.trans_lt r.prop‚ü©
  ¬∑ rfl

theorem continuousWithinAt_todo1_Ici (a : Œ±) (x : ‚Ñù) :
    ContinuousWithinAt (todo1 f a) (Ici x) x := by
  rw [‚Üê continuousWithinAt_Ioi_iff_Ici]
  convert Monotone.tendsto_nhdsWithin_Ioi (monotone_todo1 hf a) x
  rw [sInf_image']
  have h' : ‚®Ö r : Ioi x, todo1 f a r = ‚®Ö r : { r' : ‚Ñö // x < r' }, todo1 f a r := by
    refine' Real.iInf_Ioi_eq_iInf_rat_gt x _ (monotone_todo1 hf a)
    refine' ‚ü®0, fun z ‚Ü¶ _‚ü©
    rintro ‚ü®u, -, rfl‚ü©
    exact todo1_nonneg hf a u
  have h'' :
    ‚®Ö r : { r' : ‚Ñö // x < r' }, todo1 f a r =
      ‚®Ö r : { r' : ‚Ñö // x < r' }, f a r := by
    congr with r
    exact todo1_eq hf a r
  rw [h', h'', ContinuousWithinAt]
  congr!
  rw [todo1_def]

/-! ### Conditional cdf -/


/-- Conditional cdf of the measure given the value on `Œ±`, as a Stieltjes function. -/
noncomputable def todo2 (a : Œ±) : StieltjesFunction where
  toFun := todo1 f a
  mono' := monotone_todo1 hf a
  right_continuous' x := continuousWithinAt_todo1_Ici hf a x

theorem todo2_eq (a : Œ±) (r : ‚Ñö) : todo2 hf a r = f a r := todo1_eq hf a r

/-- The conditional cdf is non-negative for all `a : Œ±`. -/
theorem todo2_nonneg (a : Œ±) (r : ‚Ñù) : 0 ‚â§ todo2 hf a r := todo1_nonneg hf a r

/-- The conditional cdf is lower or equal to 1 for all `a : Œ±`. -/
theorem todo2_le_one (a : Œ±) (x : ‚Ñù) : todo2 hf a x ‚â§ 1 := by
  obtain ‚ü®r, hrx‚ü© := exists_rat_gt x
  rw [‚Üê StieltjesFunction.iInf_rat_gt_eq]
  simp_rw [todo2_eq]
  refine ciInf_le_of_le (bddBelow_range_gt hf a x) ?_ (hf.le_one _ _)
  exact ‚ü®r, hrx‚ü©

/-- The conditional cdf tends to 0 at -‚àû for all `a : Œ±`. -/
theorem tendsto_todo2_atBot (a : Œ±) :
    Tendsto (todo2 hf a) atBot (ùìù 0) := by
  have h_exists : ‚àÄ x : ‚Ñù, ‚àÉ q : ‚Ñö, x < q ‚àß ‚Üëq < x + 1 := fun x ‚Ü¶ exists_rat_btwn (lt_add_one x)
  let qs : ‚Ñù ‚Üí ‚Ñö := fun x ‚Ü¶ (h_exists x).choose
  have hqs_tendsto : Tendsto qs atBot atBot := by
    rw [tendsto_atBot_atBot]
    refine fun q ‚Ü¶ ‚ü®q - 1, fun y hy ‚Ü¶ ?_‚ü©
    have h_le : ‚Üë(qs y) ‚â§ (q : ‚Ñù) - 1 + 1 :=
      (h_exists y).choose_spec.2.le.trans (add_le_add hy le_rfl)
    rw [sub_add_cancel] at h_le
    exact mod_cast h_le
  refine tendsto_of_tendsto_of_tendsto_of_le_of_le tendsto_const_nhds
    ((hf.tendsto_atBot_zero a).comp hqs_tendsto) (todo2_nonneg hf a) fun x ‚Ü¶ ?_
  rw [Function.comp_apply, ‚Üê todo2_eq hf]
  exact (todo2 hf a).mono (h_exists x).choose_spec.1.le

/-- The conditional cdf tends to 1 at +‚àû for all `a : Œ±`. -/
theorem tendsto_todo2_atTop (a : Œ±) :
    Tendsto (todo2 hf a) atTop (ùìù 1) := by
  have h_exists : ‚àÄ x : ‚Ñù, ‚àÉ q : ‚Ñö, x - 1 < q ‚àß ‚Üëq < x := fun x ‚Ü¶ exists_rat_btwn (sub_one_lt x)
  let qs : ‚Ñù ‚Üí ‚Ñö := fun x ‚Ü¶ (h_exists x).choose
  have hqs_tendsto : Tendsto qs atTop atTop := by
    rw [tendsto_atTop_atTop]
    refine fun q ‚Ü¶ ‚ü®q + 1, fun y hy ‚Ü¶ ?_‚ü©
    have h_le : y - 1 ‚â§ qs y := (h_exists y).choose_spec.1.le
    rw [sub_le_iff_le_add] at h_le
    exact_mod_cast le_of_add_le_add_right (hy.trans h_le)
  refine tendsto_of_tendsto_of_tendsto_of_le_of_le ((hf.tendsto_atTop_one a).comp hqs_tendsto)
      tendsto_const_nhds ?_ (todo2_le_one hf a)
  intro x
  rw [Function.comp_apply, ‚Üê todo2_eq hf]
  exact (todo2 hf a).mono (le_of_lt (h_exists x).choose_spec.2)

/-- The conditional cdf is a measurable function of `a : Œ±` for all `x : ‚Ñù`. -/
theorem measurable_todo2 (x : ‚Ñù) : Measurable fun a ‚Ü¶ todo2 hf a x := by
  have : (fun a ‚Ü¶ todo2 hf a x) = fun a ‚Ü¶ ‚®Ö r : { r' : ‚Ñö // x < r' }, f a ‚Üër := by
    ext1 a
    rw [‚Üê StieltjesFunction.iInf_rat_gt_eq]
    congr with q
    rw [todo2_eq]
  rw [this]
  exact measurable_iInf (fun q ‚Ü¶ hf.measurable q)

/-- The conditional cdf is a strongly measurable function of `a : Œ±` for all `x : ‚Ñù`. -/
theorem stronglyMeasurable_todo2 (x : ‚Ñù) :
    StronglyMeasurable fun a ‚Ü¶ todo2 hf a x :=
  (measurable_todo2 hf x).stronglyMeasurable

section Measure

theorem measure_todo2_Iic (a : Œ±) (x : ‚Ñù) :
    (todo2 hf a).measure (Iic x) = ENNReal.ofReal (todo2 hf a x) := by
  rw [‚Üê sub_zero (todo2 hf a x)]
  exact (todo2 hf a).measure_Iic (tendsto_todo2_atBot hf a) _

theorem measure_todo2_univ (a : Œ±) : (todo2 hf a).measure univ = 1 := by
  rw [‚Üê ENNReal.ofReal_one, ‚Üê sub_zero (1 : ‚Ñù)]
  exact StieltjesFunction.measure_univ _ (tendsto_todo2_atBot hf a) (tendsto_todo2_atTop hf a)

instance instIsProbabilityMeasure_todo2 (a : Œ±) :
    IsProbabilityMeasure (todo2 hf a).measure :=
  ‚ü®measure_todo2_univ hf a‚ü©

/-- The function `a ‚Ü¶ (condCDF œÅ a).measure` is measurable. -/
theorem measurable_measure_todo2 :
    Measurable fun a ‚Ü¶ (todo2 hf a).measure := by
  rw [Measure.measurable_measure]
  refine' fun s hs ‚Ü¶ ?_
  -- Porting note: supplied `C`
  refine' MeasurableSpace.induction_on_inter
    (C := fun s ‚Ü¶ Measurable fun b ‚Ü¶ StieltjesFunction.measure (todo2 hf b) s)
    (borel_eq_generateFrom_Iic ‚Ñù) isPiSystem_Iic _ _ _ _ hs
  ¬∑ simp only [measure_empty, measurable_const]
  ¬∑ rintro S ‚ü®u, rfl‚ü©
    simp_rw [measure_todo2_Iic hf _ u]
    exact (measurable_todo2 hf u).ennreal_ofReal
  ¬∑ intro t ht ht_cd_meas
    have : (fun a ‚Ü¶ (todo2 hf a).measure t·∂ú) =
        (fun a ‚Ü¶ (todo2 hf a).measure univ) - fun a ‚Ü¶ (todo2 hf a).measure t := by
      ext1 a
      rw [measure_compl ht (measure_ne_top (todo2 hf a).measure _), Pi.sub_apply]
    simp_rw [this, measure_todo2_univ hf]
    exact Measurable.sub measurable_const ht_cd_meas
  ¬∑ intro f hf_disj hf_meas hf_cd_meas
    simp_rw [measure_iUnion hf_disj hf_meas]
    exact Measurable.ennreal_tsum hf_cd_meas

end Measure

end ProbabilityTheory
