/-
Copyright (c) 2024 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne
-/
import Mathlib.Probability.Kernel.Disintegration.CDFKernel
import Mathlib.Probability.Kernel.Disintegration.Density

/-!
# Kernel CDF

## Main definitions

* `FooBar`

## Main statements

* `fooBar_unique`

## Implementation details


## References

-/


open MeasureTheory Set Filter

open scoped NNReal ENNReal MeasureTheory Topology ProbabilityTheory

namespace ProbabilityTheory

variable {Œ± Œ≥ : Type*} {mŒ± : MeasurableSpace Œ±} {mŒ≥ : MeasurableSpace Œ≥}
  [MeasurableSpace.CountablyGenerated Œ≥] {Œ∫ : kernel Œ± (Œ≥ √ó ‚Ñù)} {ŒΩ : kernel Œ± Œ≥}

noncomputable
def mLimsupIic (Œ∫ : kernel Œ± (Œ≥ √ó ‚Ñù)) (ŒΩ : kernel Œ± Œ≥) (a : Œ±) (t : Œ≥) (q : ‚Ñö) : ‚Ñù :=
  MLimsup Œ∫ ŒΩ a t (Set.Iic q)

lemma measurable_mLimsupIic (Œ∫ : kernel Œ± (Œ≥ √ó ‚Ñù)) (ŒΩ : kernel Œ± Œ≥) :
    Measurable (fun p : Œ± √ó Œ≥ ‚Ü¶ mLimsupIic Œ∫ ŒΩ p.1 p.2) := by
  rw [measurable_pi_iff]
  exact fun _ ‚Ü¶ measurable_mLimsup Œ∫ ŒΩ measurableSet_Iic

lemma measurable_mLimsupIic_right (Œ∫ : kernel Œ± (Œ≥ √ó ‚Ñù)) (ŒΩ : kernel Œ± Œ≥) (a : Œ±) (q : ‚Ñö) :
    Measurable (fun t ‚Ü¶ mLimsupIic Œ∫ ŒΩ a t q) :=
  measurable_mLimsup_right _ _ measurableSet_Iic _

lemma monotone_mLimsupIic (hŒ∫ŒΩ : kernel.fst Œ∫ ‚â§ ŒΩ) (a : Œ±) (t : Œ≥) :
    Monotone (mLimsupIic Œ∫ ŒΩ a t) := by
  intro q r hqr
  rw [mLimsupIic, mLimsupIic]
  refine mLimsup_mono_set hŒ∫ŒΩ a t ?_
  refine Iic_subset_Iic.mpr ?_
  exact_mod_cast hqr

lemma mLimsupIic_nonneg (hŒ∫ŒΩ : kernel.fst Œ∫ ‚â§ ŒΩ) (a : Œ±) (t : Œ≥) (q : ‚Ñö) :
    0 ‚â§ mLimsupIic Œ∫ ŒΩ a t q :=
  mLimsup_nonneg hŒ∫ŒΩ a t _

lemma mLimsupIic_le_one (hŒ∫ŒΩ : kernel.fst Œ∫ ‚â§ ŒΩ) (a : Œ±) (t : Œ≥) (q : ‚Ñö) :
    mLimsupIic Œ∫ ŒΩ a t q ‚â§ 1 :=
  mLimsup_le_one hŒ∫ŒΩ a t _

lemma tendsto_atTop_mLimsupIic (Œ∫ : kernel Œ± (Œ≥ √ó ‚Ñù)) [IsFiniteKernel Œ∫] (a : Œ±) :
    ‚àÄ·µê t ‚àÇ(kernel.fst Œ∫ a), Tendsto (fun q ‚Ü¶ mLimsupIic Œ∫ (kernel.fst Œ∫) a t q) atTop (ùìù 1) := by
  let ŒΩ := kernel.fst Œ∫
  suffices ‚àÄ·µê t ‚àÇ(ŒΩ a), Tendsto (fun (n : ‚Ñï) ‚Ü¶ mLimsupIic Œ∫ ŒΩ a t n) atTop (ùìù 1) by
    filter_upwards [this] with t ht
    let f := fun q : ‚Ñö ‚Ü¶ mLimsupIic Œ∫ ŒΩ a t ‚åäq‚åã‚Çä
    let g := fun q : ‚Ñö ‚Ü¶ mLimsupIic Œ∫ ŒΩ a t ‚åàq‚åâ‚Çä
    have hf_le : ‚àÄ·∂† q in atTop, f q ‚â§ mLimsupIic Œ∫ ŒΩ a t q := by
      simp only [eventually_atTop, ge_iff_le]
      exact ‚ü®0, fun q hq ‚Ü¶ monotone_mLimsupIic le_rfl a t (Nat.floor_le hq)‚ü©
    have hg_le : ‚àÄ q, mLimsupIic Œ∫ ŒΩ a t q ‚â§ g q :=
      fun q ‚Ü¶ monotone_mLimsupIic le_rfl a t (Nat.le_ceil _)
    refine tendsto_of_tendsto_of_tendsto_of_le_of_le' ?_ ?_ hf_le (eventually_of_forall hg_le)
    ¬∑ exact ht.comp tendsto_nat_floor_atTop
    ¬∑ exact ht.comp tendsto_nat_ceil_atTop
  let s : ‚Ñï ‚Üí Set ‚Ñù := fun n ‚Ü¶ Iic n
  have hs : Monotone s := fun i j hij ‚Ü¶ Iic_subset_Iic.mpr (by exact mod_cast hij)
  have hs_iUnion : ‚ãÉ i, s i = univ := by
    ext x
    simp only [mem_iUnion, mem_Iic, mem_univ, iff_true]
    exact ‚ü®Nat.ceil x, Nat.le_ceil x‚ü©
  have hs_meas : ‚àÄ n, MeasurableSet (s n) := fun _ ‚Ü¶ measurableSet_Iic
  filter_upwards [tendsto_mLimsup_atTop_ae_of_monotone a s hs hs_iUnion hs_meas]
    with x hx using hx

lemma tendsto_atBot_mLimsupIic (hŒ∫ŒΩ : kernel.fst Œ∫ ‚â§ ŒΩ) [IsFiniteKernel Œ∫] [IsFiniteKernel ŒΩ]
    (a : Œ±) :
    ‚àÄ·µê t ‚àÇ(ŒΩ a), Tendsto (fun q ‚Ü¶ mLimsupIic Œ∫ ŒΩ a t q) atBot (ùìù 0) := by
  suffices ‚àÄ·µê t ‚àÇ(ŒΩ a), Tendsto (fun q ‚Ü¶ mLimsupIic Œ∫ ŒΩ a t (-q)) atTop (ùìù 0) by
    filter_upwards [this] with t ht
    have h_eq_neg : (fun q ‚Ü¶ mLimsupIic Œ∫ ŒΩ a t q) = fun q ‚Ü¶ mLimsupIic Œ∫ ŒΩ a t (- -q) := by
      simp_rw [neg_neg]
    rw [h_eq_neg]
    exact ht.comp tendsto_neg_atBot_atTop
  suffices ‚àÄ·µê t ‚àÇ(ŒΩ a), Tendsto (fun (n : ‚Ñï) ‚Ü¶ mLimsupIic Œ∫ ŒΩ a t (-n)) atTop (ùìù 0) by
    filter_upwards [this] with t ht
    let f := fun q : ‚Ñö ‚Ü¶ mLimsupIic Œ∫ ŒΩ a t (-‚åäq‚åã‚Çä)
    let g := fun q : ‚Ñö ‚Ü¶ mLimsupIic Œ∫ ŒΩ a t (-‚åàq‚åâ‚Çä)
    have hf_le : ‚àÄ·∂† q in atTop, mLimsupIic Œ∫ ŒΩ a t (-q) ‚â§ f q := by
      simp only [eventually_atTop, ge_iff_le]
      refine ‚ü®0, fun q hq ‚Ü¶ monotone_mLimsupIic hŒ∫ŒΩ a t ?_‚ü©
      rw [neg_le_neg_iff]
      exact Nat.floor_le hq
    have hg_le : ‚àÄ q, g q ‚â§ mLimsupIic Œ∫ ŒΩ a t (-q) := by
      refine fun q ‚Ü¶ monotone_mLimsupIic hŒ∫ŒΩ a t ?_
      rw [neg_le_neg_iff]
      exact Nat.le_ceil _
    refine tendsto_of_tendsto_of_tendsto_of_le_of_le' ?_ ?_ (eventually_of_forall hg_le) hf_le
    ¬∑ exact ht.comp tendsto_nat_ceil_atTop
    ¬∑ exact ht.comp tendsto_nat_floor_atTop
  let s : ‚Ñï ‚Üí Set ‚Ñù := fun n ‚Ü¶ Iic (-n)
  have hs : Antitone s := fun i j hij ‚Ü¶ Iic_subset_Iic.mpr (neg_le_neg (by exact mod_cast hij))
  have hs_iInter : ‚ãÇ i, s i = ‚àÖ := by
    ext x
    simp only [mem_iInter, mem_Iic, mem_empty_iff_false, iff_false, not_forall, not_le, neg_lt]
    exact exists_nat_gt (-x)
  have hs_meas : ‚àÄ n, MeasurableSet (s n) := fun _ ‚Ü¶ measurableSet_Iic
  convert tendsto_mLimsup_atTop_ae_of_antitone hŒ∫ŒΩ a s hs hs_iInter hs_meas with x n
  rw [mLimsupIic]
  simp

lemma set_integral_mLimsupIic (hŒ∫ŒΩ : kernel.fst Œ∫ ‚â§ ŒΩ) [IsFiniteKernel Œ∫] [IsFiniteKernel ŒΩ]
    (a : Œ±) (q : ‚Ñö) {A : Set Œ≥} (hA : MeasurableSet A) :
    ‚à´ t in A, mLimsupIic Œ∫ ŒΩ a t q ‚àÇ(ŒΩ a) = (Œ∫ a (A √óÀ¢ Iic (q : ‚Ñù))).toReal :=
  set_integral_mLimsup hŒ∫ŒΩ a measurableSet_Iic hA

lemma integrable_mLimsupIic (hŒ∫ŒΩ : kernel.fst Œ∫ ‚â§ ŒΩ) [IsFiniteKernel ŒΩ]
    (a : Œ±) (q : ‚Ñö) :
    Integrable (fun t ‚Ü¶ mLimsupIic Œ∫ ŒΩ a t q) (ŒΩ a) :=
  integrable_mLimsup hŒ∫ŒΩ _ measurableSet_Iic

lemma bddBelow_range_mLimsupIic (hŒ∫ŒΩ : kernel.fst Œ∫ ‚â§ ŒΩ) (a : Œ±) (t : Œ≥) (q : ‚Ñö) :
    BddBelow (range fun (r : Ioi q) ‚Ü¶ mLimsupIic Œ∫ ŒΩ a t r) := by
  refine ‚ü®0, ?_‚ü©
  rw [mem_lowerBounds]
  rintro x ‚ü®y, rfl‚ü©
  exact mLimsupIic_nonneg hŒ∫ŒΩ _ _ _

lemma integrable_iInf_rat_gt_mLimsupIic (hŒ∫ŒΩ : kernel.fst Œ∫ ‚â§ ŒΩ) [IsFiniteKernel ŒΩ]
    (a : Œ±) (q : ‚Ñö) :
    Integrable (fun t ‚Ü¶ ‚®Ö r : Ioi q, mLimsupIic Œ∫ ŒΩ a t r) (ŒΩ a) := by
  rw [‚Üê mem‚Ñíp_one_iff_integrable]
  refine ‚ü®Measurable.aestronglyMeasurable ?_, ?_‚ü©
  ¬∑ exact measurable_iInf fun i ‚Ü¶ measurable_mLimsupIic_right Œ∫ ŒΩ a i
  refine (?_ : _ ‚â§ (ŒΩ a univ : ‚Ñù‚â•0‚àû)).trans_lt (measure_lt_top _ _)
  refine (snorm_le_of_ae_bound (C := 1) (ae_of_all _ (fun t ‚Ü¶ ?_))).trans ?_
  ¬∑ rw [Real.norm_eq_abs, abs_of_nonneg]
    ¬∑ refine ciInf_le_of_le ?_ ?_ ?_
      ¬∑ exact bddBelow_range_mLimsupIic hŒ∫ŒΩ a t _
      ¬∑ exact ‚ü®q + 1, by simp‚ü©
      ¬∑ exact mLimsupIic_le_one hŒ∫ŒΩ _ _ _
    ¬∑ exact le_ciInf fun r ‚Ü¶ mLimsupIic_nonneg hŒ∫ŒΩ a t r
  ¬∑ simp

lemma set_integral_iInf_rat_gt_mLimsupIic (hŒ∫ŒΩ : kernel.fst Œ∫ ‚â§ ŒΩ) [IsFiniteKernel Œ∫]
    [IsFiniteKernel ŒΩ]
    (a : Œ±) (q : ‚Ñö) {A : Set Œ≥} (hA : MeasurableSet A) :
    ‚à´ t in A, ‚®Ö r : Ioi q, mLimsupIic Œ∫ ŒΩ a t r ‚àÇ(ŒΩ a)
      = (Œ∫ a (A √óÀ¢ Iic (q : ‚Ñù))).toReal := by
  refine le_antisymm ?_ ?_
  ¬∑ have h : ‚àÄ r : Ioi q, ‚à´ t in A, ‚®Ö r' : Ioi q, mLimsupIic Œ∫ ŒΩ a t r' ‚àÇ(ŒΩ a)
        ‚â§ (Œ∫ a (A √óÀ¢ Iic (r : ‚Ñù))).toReal := by
      intro r
      rw [‚Üê set_integral_mLimsupIic hŒ∫ŒΩ a r hA]
      refine set_integral_mono ?_ ?_ ?_
      ¬∑ exact (integrable_iInf_rat_gt_mLimsupIic hŒ∫ŒΩ _ _).integrableOn
      ¬∑ exact (integrable_mLimsupIic hŒ∫ŒΩ _ _).integrableOn
      ¬∑ exact fun t ‚Ü¶ ciInf_le (bddBelow_range_mLimsupIic hŒ∫ŒΩ _ _ _) r
    calc ‚à´ t in A, ‚®Ö r : Ioi q, mLimsupIic Œ∫ ŒΩ a t r ‚àÇ(ŒΩ a)
      ‚â§ ‚®Ö r : Ioi q, (Œ∫ a (A √óÀ¢ Iic (r : ‚Ñù))).toReal := le_ciInf h
    _ = (Œ∫ a (A √óÀ¢ Iic (q : ‚Ñù))).toReal := by
        rw [‚Üê Measure.iInf_Iic_gt_prod hA q]
        exact (ENNReal.toReal_iInf (fun r ‚Ü¶ measure_ne_top _ _)).symm
  ¬∑ rw [‚Üê set_integral_mLimsupIic hŒ∫ŒΩ a q hA]
    refine set_integral_mono ?_ ?_ ?_
    ¬∑ exact (integrable_mLimsupIic hŒ∫ŒΩ _ _).integrableOn
    ¬∑ exact (integrable_iInf_rat_gt_mLimsupIic hŒ∫ŒΩ _ _).integrableOn
    ¬∑ exact fun t ‚Ü¶ le_ciInf (fun r ‚Ü¶ monotone_mLimsupIic hŒ∫ŒΩ _ _ (le_of_lt r.prop))

lemma iInf_rat_gt_mLimsupIic_eq (hŒ∫ŒΩ : kernel.fst Œ∫ ‚â§ ŒΩ) [IsFiniteKernel Œ∫] [IsFiniteKernel ŒΩ]
    (a : Œ±) :
    ‚àÄ·µê t ‚àÇ(ŒΩ a), ‚àÄ q : ‚Ñö, ‚®Ö r : Ioi q, mLimsupIic Œ∫ ŒΩ a t r = mLimsupIic Œ∫ ŒΩ a t q := by
  rw [ae_all_iff]
  refine fun q ‚Ü¶ ae_eq_of_forall_set_integral_eq_of_sigmaFinite (Œº := ŒΩ a) ?_ ?_ ?_
  ¬∑ intro s _ _
    refine Integrable.integrableOn ?_
    exact integrable_iInf_rat_gt_mLimsupIic hŒ∫ŒΩ _ _
  ¬∑ exact fun s _ _ ‚Ü¶ (integrable_mLimsupIic hŒ∫ŒΩ a q).integrableOn
  ¬∑ intro s hs _
    rw [set_integral_mLimsupIic hŒ∫ŒΩ _ _ hs, set_integral_iInf_rat_gt_mLimsupIic hŒ∫ŒΩ _ _ hs]

lemma isRatStieltjesPoint_mLimsupIic_ae (Œ∫ : kernel Œ± (Œ≥ √ó ‚Ñù)) [IsFiniteKernel Œ∫] (a : Œ±) :
    ‚àÄ·µê t ‚àÇ(kernel.fst Œ∫ a),
      IsRatStieltjesPoint (fun p q ‚Ü¶ mLimsupIic Œ∫ (kernel.fst Œ∫) p.1 p.2 q) (a, t) := by
  filter_upwards [tendsto_atTop_mLimsupIic Œ∫ a, tendsto_atBot_mLimsupIic le_rfl a,
    iInf_rat_gt_mLimsupIic_eq le_rfl a] with t ht_top ht_bot ht_iInf
  exact ‚ü®monotone_mLimsupIic le_rfl a t, ht_top, ht_bot, ht_iInf‚ü©

lemma isRatKernelCDF_mLimsupIic (Œ∫ : kernel Œ± (Œ≥ √ó ‚Ñù)) [IsFiniteKernel Œ∫] :
    IsRatKernelCDF (fun p : Œ± √ó Œ≥ ‚Ü¶ mLimsupIic Œ∫ (kernel.fst Œ∫) p.1 p.2) Œ∫ (kernel.fst Œ∫) where
  measurable := measurable_mLimsupIic Œ∫ (kernel.fst Œ∫)
  isRatStieltjesPoint_ae := isRatStieltjesPoint_mLimsupIic_ae Œ∫
  integrable := integrable_mLimsupIic le_rfl
  set_integral := fun _ _ hs _ ‚Ü¶ set_integral_mLimsupIic le_rfl _ _ hs

noncomputable
def mLimsupCDF (Œ∫ : kernel Œ± (Œ≥ √ó ‚Ñù)) [IsFiniteKernel Œ∫] :
    Œ± √ó Œ≥ ‚Üí StieltjesFunction :=
  stieltjesOfMeasurableRat (fun p : Œ± √ó Œ≥ ‚Ü¶ mLimsupIic Œ∫ (kernel.fst Œ∫) p.1 p.2)
    (isRatKernelCDF_mLimsupIic Œ∫).measurable

lemma isKernelCDF_mLimsupCDF (Œ∫ : kernel Œ± (Œ≥ √ó ‚Ñù)) [IsFiniteKernel Œ∫] :
    IsKernelCDF (mLimsupCDF Œ∫) Œ∫ (kernel.fst Œ∫) :=
  isKernelCDF_stieltjesOfMeasurableRat (isRatKernelCDF_mLimsupIic Œ∫)

end ProbabilityTheory
