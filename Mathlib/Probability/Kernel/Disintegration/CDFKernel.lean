/-
Copyright (c) 2024 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne
-/
import Mathlib.Probability.Kernel.Disintegration.MeasurableStieltjes
import Mathlib.Probability.Kernel.MeasureCompProd
import Mathlib.Probability.Kernel.Disintegration.AuxLemmas

/-!


-/


open MeasureTheory Set Filter TopologicalSpace

open scoped NNReal ENNReal MeasureTheory Topology ProbabilityTheory

namespace ProbabilityTheory

variable {Œ± Œ≤ : Type*} [MeasurableSpace Œ±]

section stieltjesOfMeasurableRat

variable {Œ± Œ≤ : Type*} [MeasurableSpace Œ±] {mŒ≤ : MeasurableSpace Œ≤}
  {f : Œ± √ó Œ≤ ‚Üí ‚Ñö ‚Üí ‚Ñù} {Œº : kernel Œ± (Œ≤ √ó ‚Ñù)} {ŒΩ : kernel Œ± Œ≤}

structure IsRatKernelCDF (f : Œ± √ó Œ≤ ‚Üí ‚Ñö ‚Üí ‚Ñù) (Œº : kernel Œ± (Œ≤ √ó ‚Ñù)) (ŒΩ : kernel Œ± Œ≤) : Prop :=
  (measurable : Measurable f)
  (isRatStieltjesPoint_ae (a : Œ±) : ‚àÄ·µê t ‚àÇ(ŒΩ a), IsRatStieltjesPoint f (a, t))
  (integrable (a : Œ±) (q : ‚Ñö) : Integrable (fun t ‚Ü¶ f (a, t) q) (ŒΩ a))
  (set_integral (a : Œ±) {s : Set Œ≤} (_hs : MeasurableSet s) (q : ‚Ñö) :
    ‚à´ t in s, f (a, t) q ‚àÇ(ŒΩ a) = (Œº a (s √óÀ¢ Iic (q : ‚Ñù))).toReal)

lemma stieltjesOfMeasurableRat_ae_eq (hf : IsRatKernelCDF f Œº ŒΩ) (a : Œ±) (q : ‚Ñö) :
    (fun t ‚Ü¶ stieltjesOfMeasurableRat f hf.measurable (a, t) q) =·µê[ŒΩ a] fun t ‚Ü¶ f (a, t) q := by
  filter_upwards [hf.isRatStieltjesPoint_ae a] with a ha
  rw [stieltjesOfMeasurableRat_eq, toRatCDF_of_isRatStieltjesPoint ha]

lemma set_integral_stieltjesOfMeasurableRat_rat (hf : IsRatKernelCDF f Œº ŒΩ) (a : Œ±) (q : ‚Ñö)
    {s : Set Œ≤} (hs : MeasurableSet s) :
    ‚à´ t in s, stieltjesOfMeasurableRat f hf.measurable (a, t) q ‚àÇ(ŒΩ a)
      = (Œº a (s √óÀ¢ Iic (q : ‚Ñù))).toReal := by
  rw [set_integral_congr_ae hs (g := fun t ‚Ü¶ f (a, t) q) ?_, hf.set_integral a hs]
  filter_upwards [stieltjesOfMeasurableRat_ae_eq hf a q] with b hb using fun _ ‚Ü¶ hb

lemma set_lintegral_stieltjesOfMeasurableRat_rat [IsFiniteKernel Œº] (hf : IsRatKernelCDF f Œº ŒΩ)
    (a : Œ±) (q : ‚Ñö) {s : Set Œ≤} (hs : MeasurableSet s) :
    ‚à´‚Åª t in s, ENNReal.ofReal (stieltjesOfMeasurableRat f hf.measurable (a, t) q) ‚àÇ(ŒΩ a)
      = Œº a (s √óÀ¢ Iic (q : ‚Ñù)) := by
  rw [‚Üê ofReal_integral_eq_lintegral_ofReal]
  ¬∑ rw [set_integral_stieltjesOfMeasurableRat_rat hf a q hs, ENNReal.ofReal_toReal]
    exact measure_ne_top _ _
  ¬∑ refine Integrable.restrict ?_
    rw [integrable_congr (stieltjesOfMeasurableRat_ae_eq hf a q)]
    exact hf.integrable a q
  ¬∑ exact ae_of_all _ (fun x ‚Ü¶ stieltjesOfMeasurableRat_nonneg _ _ _)

lemma set_lintegral_stieltjesOfMeasurableRat [IsFiniteKernel Œº] (hf : IsRatKernelCDF f Œº ŒΩ)
    (a : Œ±) (x : ‚Ñù) {s : Set Œ≤} (hs : MeasurableSet s) :
    ‚à´‚Åª t in s, ENNReal.ofReal (stieltjesOfMeasurableRat f hf.measurable (a, t) x) ‚àÇ(ŒΩ a)
      = Œº a (s √óÀ¢ Iic x) := by
  -- We have the result for `x : ‚Ñö` thanks to `set_lintegral_stieltjesOfMeasurableRat_rat`.
  -- We use  a monotone convergence argument to extend it to the reals.
  by_cases hœÅ_zero : (ŒΩ a).restrict s = 0
  ¬∑ rw [hœÅ_zero, lintegral_zero_measure]
    have ‚ü®q, hq‚ü© := exists_rat_gt x
    suffices Œº a (s √óÀ¢ Iic (q : ‚Ñù)) = 0 by
      symm
      refine measure_mono_null (fun p ‚Ü¶ ?_) this
      simp only [mem_prod, mem_Iic, and_imp]
      exact fun h1 h2 ‚Ü¶ ‚ü®h1, h2.trans hq.le‚ü©
    suffices (Œº a (s √óÀ¢ Iic (q : ‚Ñù))).toReal = 0 by
      rw [ENNReal.toReal_eq_zero_iff] at this
      simpa [measure_ne_top] using this
    rw [‚Üê hf.set_integral a hs q]
    simp [hœÅ_zero]
  have h : ‚à´‚Åª t in s, ENNReal.ofReal (stieltjesOfMeasurableRat f hf.measurable (a, t) x) ‚àÇ(ŒΩ a)
      = ‚à´‚Åª t in s, ‚®Ö r : { r' : ‚Ñö // x < r' },
        ENNReal.ofReal (stieltjesOfMeasurableRat f hf.measurable (a, t) r) ‚àÇ(ŒΩ a) := by
    congr with t : 1
    simp_rw [‚Üê measure_stieltjesOfMeasurableRat_Iic]
    rw [‚Üê measure_iInter_eq_iInf]
    ¬∑ congr with y : 1
      simp only [mem_Iic, mem_iInter, Subtype.forall]
      refine ‚ü®fun h a ha ‚Ü¶ h.trans ?_, fun h ‚Ü¶ ?_‚ü©
      ¬∑ exact mod_cast ha.le
      ¬∑ refine le_of_forall_lt_rat_imp_le fun q hq ‚Ü¶ h q ?_
        exact mod_cast hq
    ¬∑ exact fun _ ‚Ü¶ measurableSet_Iic
    ¬∑ refine Monotone.directed_ge fun r r' hrr' ‚Ü¶ ?_
      refine Iic_subset_Iic.mpr ?_
      exact mod_cast hrr'
    ¬∑ obtain ‚ü®q, hq‚ü© := exists_rat_gt x
      exact ‚ü®‚ü®q, hq‚ü©, measure_ne_top _ _‚ü©
  have h_nonempty : Nonempty { r' : ‚Ñö // x < ‚Üër' } := by
    obtain ‚ü®r, hrx‚ü© := exists_rat_gt x
    exact ‚ü®‚ü®r, hrx‚ü©‚ü©
  rw [h, lintegral_iInf_directed_of_measurable hœÅ_zero fun q : { r' : ‚Ñö // x < ‚Üër' } ‚Ü¶ ?_]
  rotate_left
  ¬∑ intro b
    rw [set_lintegral_stieltjesOfMeasurableRat_rat hf a _ hs]
    exact measure_ne_top _ _
  ¬∑ refine Monotone.directed_ge fun i j hij t ‚Ü¶ ?_
    simp_rw [‚Üê measure_stieltjesOfMeasurableRat_Iic]
    refine measure_mono (Iic_subset_Iic.mpr ?_)
    exact mod_cast hij
  ¬∑ refine Measurable.ennreal_ofReal ?_
    exact (measurable_stieltjesOfMeasurableRat hf.measurable _).comp measurable_prod_mk_left
  simp_rw [set_lintegral_stieltjesOfMeasurableRat_rat hf _ _ hs]
  rw [‚Üê measure_iInter_eq_iInf]
  ¬∑ rw [‚Üê prod_iInter]
    congr with y
    simp only [mem_iInter, mem_Iic, Subtype.forall, Subtype.coe_mk]
    exact ‚ü®le_of_forall_lt_rat_imp_le, fun hyx q hq ‚Ü¶ hyx.trans hq.le‚ü©
  ¬∑ exact fun i ‚Ü¶ hs.prod measurableSet_Iic
  ¬∑ refine Monotone.directed_ge fun i j hij ‚Ü¶ ?_
    refine prod_subset_prod_iff.mpr (Or.inl ‚ü®subset_rfl, Iic_subset_Iic.mpr ?_‚ü©)
    exact mod_cast hij
  ¬∑ exact ‚ü®h_nonempty.some, measure_ne_top _ _‚ü©

lemma lintegral_stieltjesOfMeasurableRat [IsFiniteKernel Œº] (hf : IsRatKernelCDF f Œº ŒΩ)
    (a : Œ±) (x : ‚Ñù) :
    ‚à´‚Åª t, ENNReal.ofReal (stieltjesOfMeasurableRat f hf.measurable (a, t) x) ‚àÇ(ŒΩ a)
      = Œº a (univ √óÀ¢ Iic x) := by
  rw [‚Üê set_lintegral_univ, set_lintegral_stieltjesOfMeasurableRat hf _ _ MeasurableSet.univ]

lemma integrable_stieltjesOfMeasurableRat [IsFiniteKernel Œº] (hf : IsRatKernelCDF f Œº ŒΩ)
    (a : Œ±) (x : ‚Ñù) :
    Integrable (fun t ‚Ü¶ stieltjesOfMeasurableRat f hf.measurable (a, t) x) (ŒΩ a) := by
  have : (fun t ‚Ü¶ stieltjesOfMeasurableRat f hf.measurable (a, t) x)
      = fun t ‚Ü¶ (ENNReal.ofReal (stieltjesOfMeasurableRat f hf.measurable (a, t) x)).toReal := by
    ext t
    rw [ENNReal.toReal_ofReal]
    exact stieltjesOfMeasurableRat_nonneg _ _ _
  rw [this]
  refine integrable_toReal_of_lintegral_ne_top ?_ ?_
  ¬∑ refine (Measurable.ennreal_ofReal ?_).aemeasurable
    exact (measurable_stieltjesOfMeasurableRat hf.measurable x).comp measurable_prod_mk_left
  ¬∑ rw [lintegral_stieltjesOfMeasurableRat hf]
    exact measure_ne_top _ _

lemma set_integral_stieltjesOfMeasurableRat [IsFiniteKernel Œº] (hf : IsRatKernelCDF f Œº ŒΩ)
    (a : Œ±) (x : ‚Ñù) {s : Set Œ≤} (hs : MeasurableSet s) :
    ‚à´ t in s, stieltjesOfMeasurableRat f hf.measurable (a, t) x ‚àÇ(ŒΩ a)
      = (Œº a (s √óÀ¢ Iic x)).toReal := by
  rw [‚Üê ENNReal.ofReal_eq_ofReal_iff, ENNReal.ofReal_toReal]
  rotate_left
  ¬∑ exact measure_ne_top _ _
  ¬∑ exact set_integral_nonneg hs (fun _ _ ‚Ü¶ stieltjesOfMeasurableRat_nonneg _ _ _)
  ¬∑ exact ENNReal.toReal_nonneg
  rw [ofReal_integral_eq_lintegral_ofReal, set_lintegral_stieltjesOfMeasurableRat hf _ _ hs]
  ¬∑ exact (integrable_stieltjesOfMeasurableRat hf _ _).restrict
  ¬∑ exact ae_of_all _ (fun _ ‚Ü¶ stieltjesOfMeasurableRat_nonneg _ _ _)

lemma integral_stieltjesOfMeasurableRat [IsFiniteKernel Œº] (hf : IsRatKernelCDF f Œº ŒΩ)
    (a : Œ±) (x : ‚Ñù) :
    ‚à´ t, stieltjesOfMeasurableRat f hf.measurable (a, t) x ‚àÇ(ŒΩ a)
      = (Œº a (univ √óÀ¢ Iic x)).toReal := by
  rw [‚Üê integral_univ, set_integral_stieltjesOfMeasurableRat hf _ _ MeasurableSet.univ]

end stieltjesOfMeasurableRat

section IsKernelCDF

variable {Œ± Œ≤ : Type*} [MeasurableSpace Œ±] {mŒ≤ : MeasurableSpace Œ≤}
  {f : Œ± √ó Œ≤ ‚Üí StieltjesFunction} {Œº : kernel Œ± (Œ≤ √ó ‚Ñù)} {ŒΩ : kernel Œ± Œ≤}

structure IsKernelCDF (f : Œ± √ó Œ≤ ‚Üí StieltjesFunction) (Œº : kernel Œ± (Œ≤ √ó ‚Ñù)) (ŒΩ : kernel Œ± Œ≤) :
    Prop :=
  (measurable (x : ‚Ñù) : Measurable fun p ‚Ü¶ f p x)
  (integrable (a : Œ±) (x : ‚Ñù) : Integrable (fun t ‚Ü¶ f (a, t) x) (ŒΩ a))
  (tendsto_atTop_one (p : Œ± √ó Œ≤) : Tendsto (f p) atTop (ùìù 1))
  (tendsto_atBot_zero (p : Œ± √ó Œ≤) : Tendsto (f p) atBot (ùìù 0))
  (set_integral (a : Œ±) {s : Set Œ≤} (_hs : MeasurableSet s) (x : ‚Ñù) :
    ‚à´ t in s, f (a, t) x ‚àÇ(ŒΩ a) = (Œº a (s √óÀ¢ Iic x)).toReal)

lemma IsKernelCDF.nonneg (hf : IsKernelCDF f Œº ŒΩ) (p : Œ± √ó Œ≤) (x : ‚Ñù) : 0 ‚â§ f p x :=
  Monotone.le_of_tendsto (f p).mono (hf.tendsto_atBot_zero p) x

lemma IsKernelCDF.le_one (hf : IsKernelCDF f Œº ŒΩ) (p : Œ± √ó Œ≤) (x : ‚Ñù) : f p x ‚â§ 1 :=
  Monotone.ge_of_tendsto (f p).mono (hf.tendsto_atTop_one p) x

lemma IsKernelCDF.set_lintegral [IsFiniteKernel Œº]
    {f : Œ± √ó Œ≤ ‚Üí StieltjesFunction} (hf : IsKernelCDF f Œº ŒΩ)
    (a : Œ±) {s : Set Œ≤} (hs : MeasurableSet s) (x : ‚Ñù) :
    ‚à´‚Åª t in s, ENNReal.ofReal (f (a, t) x) ‚àÇ(ŒΩ a) = Œº a (s √óÀ¢ Iic x) := by
  rw [‚Üê ofReal_integral_eq_lintegral_ofReal (hf.integrable a x).restrict
    (ae_of_all _ (fun _ ‚Ü¶ hf.nonneg _ _)), hf.set_integral a hs x, ENNReal.ofReal_toReal]
  exact measure_ne_top _ _

lemma isKernelCDF_stieltjesOfMeasurableRat {f : Œ± √ó Œ≤ ‚Üí ‚Ñö ‚Üí ‚Ñù} (hf : IsRatKernelCDF f Œº ŒΩ)
    [IsFiniteKernel Œº] :
    IsKernelCDF (stieltjesOfMeasurableRat f hf.measurable) Œº ŒΩ where
  measurable := measurable_stieltjesOfMeasurableRat hf.measurable
  integrable := integrable_stieltjesOfMeasurableRat hf
  tendsto_atTop_one := tendsto_stieltjesOfMeasurableRat_atTop hf.measurable
  tendsto_atBot_zero := tendsto_stieltjesOfMeasurableRat_atBot hf.measurable
  set_integral a _ hs x := set_integral_stieltjesOfMeasurableRat hf a x hs

end IsKernelCDF

section kernel

variable {_ : MeasurableSpace Œ≤} {f : Œ± √ó Œ≤ ‚Üí StieltjesFunction}
  {Œº : kernel Œ± (Œ≤ √ó ‚Ñù)} {ŒΩ : kernel Œ± Œ≤} {hf : IsKernelCDF f Œº ŒΩ}

lemma isProbabilityMeasure_stieltjesFunction {f : StieltjesFunction}
    (hf_bot : Tendsto f atBot (ùìù 0)) (hf_top : Tendsto f atTop (ùìù 1)) :
    IsProbabilityMeasure f.measure :=
  ‚ü®by simp [StieltjesFunction.measure_univ _ hf_bot hf_top]‚ü©

lemma StieltjesFunction.measurable_measure {f : Œ± ‚Üí StieltjesFunction}
    (hf : ‚àÄ q, Measurable fun a ‚Ü¶ f a q)
    (hf_bot : ‚àÄ a, Tendsto (f a) atBot (ùìù 0))
    (hf_top : ‚àÄ a, Tendsto (f a) atTop (ùìù 1)) :
    Measurable fun a ‚Ü¶ (f a).measure := by
  rw [Measure.measurable_measure]
  have : ‚àÄ a, IsProbabilityMeasure (f a).measure :=
    fun a ‚Ü¶ isProbabilityMeasure_stieltjesFunction (hf_bot _) (hf_top _)
  refine fun s hs ‚Ü¶ ?_
  -- Porting note: supplied `C`
  refine MeasurableSpace.induction_on_inter
    (C := fun s ‚Ü¶ Measurable fun b ‚Ü¶ StieltjesFunction.measure (f b) s)
    (borel_eq_generateFrom_Iic ‚Ñù) isPiSystem_Iic ?_ ?_ ?_ ?_ hs
  ¬∑ simp only [measure_empty, measurable_const]
  ¬∑ rintro S ‚ü®u, rfl‚ü©
    simp_rw [StieltjesFunction.measure_Iic (f _) (hf_bot _)]
    simp only [sub_zero]
    exact (hf _).ennreal_ofReal
  ¬∑ intro t ht ht_cd_meas
    have : (fun a ‚Ü¶ (f a).measure t·∂ú) =
        (fun a ‚Ü¶ (f a).measure univ)
          - fun a ‚Ü¶ (f a).measure t := by
      ext1 a
      rw [measure_compl ht, Pi.sub_apply]
      exact measure_ne_top _ _
    simp_rw [this, measure_univ]
    exact Measurable.sub measurable_const ht_cd_meas
  ¬∑ intro f hf_disj hf_meas hf_cd_meas
    simp_rw [measure_iUnion hf_disj hf_meas]
    exact Measurable.ennreal_tsum hf_cd_meas

noncomputable
def IsKernelCDF.toKernel (f : Œ± √ó Œ≤ ‚Üí StieltjesFunction) (hf : IsKernelCDF f Œº ŒΩ) :
    kernel (Œ± √ó Œ≤) ‚Ñù where
  val p := (f p).measure
  property := StieltjesFunction.measurable_measure hf.measurable
    hf.tendsto_atBot_zero hf.tendsto_atTop_one

lemma IsKernelCDF.toKernel_apply (p : Œ± √ó Œ≤) : hf.toKernel f p = (f p).measure := rfl

instance instIsMarkovKernel_toKernel : IsMarkovKernel (hf.toKernel f) :=
  ‚ü®fun _ ‚Ü¶ isProbabilityMeasure_stieltjesFunction
    (hf.tendsto_atBot_zero _) (hf.tendsto_atTop_one _)‚ü©

lemma IsKernelCDF.toKernel_Iic (p : Œ± √ó Œ≤) (x : ‚Ñù) :
    hf.toKernel f p (Iic x) = ENNReal.ofReal (f p x) := by
  rw [IsKernelCDF.toKernel_apply p, (f p).measure_Iic (hf.tendsto_atBot_zero p)]
  simp

end kernel

section

variable {Œ± Œ≤ : Type*} [MeasurableSpace Œ±] {mŒ≤ : MeasurableSpace Œ≤}
  {f : Œ± √ó Œ≤ ‚Üí StieltjesFunction} {Œº : kernel Œ± (Œ≤ √ó ‚Ñù)} {ŒΩ : kernel Œ± Œ≤}
  {hf : IsKernelCDF f Œº ŒΩ}

lemma set_lintegral_toKernel_Iic [IsFiniteKernel Œº] (hf : IsKernelCDF f Œº ŒΩ)
    (a : Œ±) (x : ‚Ñù) {s : Set Œ≤} (hs : MeasurableSet s) :
    ‚à´‚Åª t in s, hf.toKernel f (a, t) (Iic x) ‚àÇ(ŒΩ a) = Œº a (s √óÀ¢ Iic x) := by
  simp_rw [IsKernelCDF.toKernel_Iic]
  exact hf.set_lintegral _ hs _

lemma set_lintegral_toKernel_univ [IsFiniteKernel Œº] (hf : IsKernelCDF f Œº ŒΩ)
    (a : Œ±) {s : Set Œ≤} (hs : MeasurableSet s) :
    ‚à´‚Åª t in s, hf.toKernel f (a, t) univ ‚àÇ(ŒΩ a) = Œº a (s √óÀ¢ univ) := by
  rw [‚Üê Real.iUnion_Iic_rat, prod_iUnion]
  have h_dir : Directed (fun x y ‚Ü¶ x ‚äÜ y) fun q : ‚Ñö ‚Ü¶ Iic (q : ‚Ñù) := by
    refine Monotone.directed_le fun r r' hrr' ‚Ü¶ Iic_subset_Iic.mpr ?_
    exact mod_cast hrr'
  have h_dir_prod : Directed (fun x y ‚Ü¶ x ‚äÜ y) fun q : ‚Ñö ‚Ü¶ s √óÀ¢ Iic (q : ‚Ñù) := by
    refine Monotone.directed_le fun i j hij ‚Ü¶ ?_
    refine prod_subset_prod_iff.mpr (Or.inl ‚ü®subset_rfl, Iic_subset_Iic.mpr ?_‚ü©)
    exact mod_cast hij
  simp_rw [measure_iUnion_eq_iSup h_dir, measure_iUnion_eq_iSup h_dir_prod]
  rw [lintegral_iSup_directed]
  ¬∑ simp_rw [set_lintegral_toKernel_Iic hf _ _ hs]
  ¬∑ refine fun q ‚Ü¶ Measurable.aemeasurable ?_
    exact (kernel.measurable_coe _ measurableSet_Iic).comp measurable_prod_mk_left
  ¬∑ refine Monotone.directed_le fun i j hij t ‚Ü¶ measure_mono (Iic_subset_Iic.mpr ?_)
    exact mod_cast hij

lemma lintegral_toKernel_univ [IsFiniteKernel Œº] (hf : IsKernelCDF f Œº ŒΩ) (a : Œ±) :
    ‚à´‚Åª t, hf.toKernel f (a, t) univ ‚àÇ(ŒΩ a) = Œº a univ := by
  rw [‚Üê set_lintegral_univ, set_lintegral_toKernel_univ hf a MeasurableSet.univ, univ_prod_univ]

lemma set_lintegral_toKernel_prod [IsFiniteKernel Œº] (hf : IsKernelCDF f Œº ŒΩ)
    (a : Œ±) {s : Set Œ≤} (hs : MeasurableSet s) {t : Set ‚Ñù} (ht : MeasurableSet t) :
    ‚à´‚Åª x in s, hf.toKernel f (a, x) t ‚àÇ(ŒΩ a) = Œº a (s √óÀ¢ t) := by
  -- `set_lintegral_toKernel_Iic` gives the result for `t = Iic x`. These sets form a
  -- œÄ-system that generates the Borel œÉ-algebra, hence we can get the same equality for any
  -- measurable set `t`.
  apply MeasurableSpace.induction_on_inter (borel_eq_generateFrom_Iic ‚Ñù) isPiSystem_Iic _ _ _ _ ht
  ¬∑ simp only [measure_empty, lintegral_const, zero_mul, prod_empty]
  ¬∑ rintro t ‚ü®q, rfl‚ü©
    exact set_lintegral_toKernel_Iic hf a _ hs
  ¬∑ intro t ht ht_lintegral
    calc ‚à´‚Åª x in s, hf.toKernel f (a, x) t·∂ú ‚àÇ(ŒΩ a)
      = ‚à´‚Åª x in s, hf.toKernel f (a, x) univ - hf.toKernel f (a, x) t ‚àÇ(ŒΩ a) := by
          congr with x; rw [measure_compl ht (measure_ne_top (hf.toKernel f (a, x)) _)]
    _ = ‚à´‚Åª x in s, hf.toKernel f (a, x) univ ‚àÇ(ŒΩ a)
          - ‚à´‚Åª x in s, hf.toKernel f (a, x) t ‚àÇ(ŒΩ a) := by
        rw [lintegral_sub]
        ¬∑ exact (kernel.measurable_coe (hf.toKernel f) ht).comp measurable_prod_mk_left
        ¬∑ rw [ht_lintegral]
          exact measure_ne_top _ _
        ¬∑ exact eventually_of_forall fun a ‚Ü¶ measure_mono (subset_univ _)
    _ = Œº a (s √óÀ¢ univ) - Œº a (s √óÀ¢ t) := by
        rw [set_lintegral_toKernel_univ hf a hs, ht_lintegral]
    _ = Œº a (s √óÀ¢ t·∂ú) := by
        rw [‚Üê measure_diff _ (hs.prod ht) (measure_ne_top _ _)]
        ¬∑ rw [prod_diff_prod, compl_eq_univ_diff]
          simp only [diff_self, empty_prod, union_empty]
        ¬∑ rw [prod_subset_prod_iff]
          exact Or.inl ‚ü®subset_rfl, subset_univ t‚ü©
  ¬∑ intro f hf_disj hf_meas hf_eq
    simp_rw [measure_iUnion hf_disj hf_meas]
    rw [lintegral_tsum, prod_iUnion, measure_iUnion]
    ¬∑ simp_rw [hf_eq]
    ¬∑ intro i j hij
      rw [Function.onFun, Set.disjoint_prod]
      exact Or.inr (hf_disj hij)
    ¬∑ exact fun i ‚Ü¶ MeasurableSet.prod hs (hf_meas i)
    ¬∑ exact fun i ‚Ü¶
        ((kernel.measurable_coe _ (hf_meas i)).comp measurable_prod_mk_left).aemeasurable.restrict

lemma lintegral_toKernel_mem [IsFiniteKernel Œº] (hf : IsKernelCDF f Œº ŒΩ)
    (a : Œ±) {s : Set (Œ≤ √ó ‚Ñù)} (hs : MeasurableSet s) :
    ‚à´‚Åª x, hf.toKernel f (a, x) {y | (x, y) ‚àà s} ‚àÇ(ŒΩ a) = Œº a s := by
  -- `set_lintegral_cdfKernel_prod` gives the result for sets of the form `t‚ÇÅ √ó t‚ÇÇ`. These
  -- sets form a œÄ-system that generates the product œÉ-algebra, hence we can get the same equality
  -- for any measurable set `s`.
  apply MeasurableSpace.induction_on_inter generateFrom_prod.symm isPiSystem_prod _ _ _ _ hs
  ¬∑ simp only [mem_empty_iff_false, setOf_false, measure_empty, lintegral_const,
      zero_mul]
  ¬∑ rintro _ ‚ü®t‚ÇÅ, ht‚ÇÅ, t‚ÇÇ, ht‚ÇÇ, rfl‚ü©
    simp only [mem_setOf_eq] at ht‚ÇÅ ht‚ÇÇ
    have h_prod_eq_snd : ‚àÄ a ‚àà t‚ÇÅ, {x : ‚Ñù | (a, x) ‚àà t‚ÇÅ √óÀ¢ t‚ÇÇ} = t‚ÇÇ := by
      intro a ha
      simp only [ha, prod_mk_mem_set_prod_eq, true_and_iff, setOf_mem_eq]
    rw [‚Üê lintegral_add_compl _ ht‚ÇÅ]
    have h_eq1 : ‚à´‚Åª x in t‚ÇÅ, hf.toKernel f (a, x) {y : ‚Ñù | (x, y) ‚àà t‚ÇÅ √óÀ¢ t‚ÇÇ} ‚àÇ(ŒΩ a)
        = ‚à´‚Åª x in t‚ÇÅ, hf.toKernel f (a, x) t‚ÇÇ ‚àÇ(ŒΩ a) := by
      refine set_lintegral_congr_fun ht‚ÇÅ (eventually_of_forall fun a ha ‚Ü¶ ?_)
      rw [h_prod_eq_snd a ha]
    have h_eq2 :
        ‚à´‚Åª x in t‚ÇÅ·∂ú, hf.toKernel f (a, x) {y : ‚Ñù | (x, y) ‚àà t‚ÇÅ √óÀ¢ t‚ÇÇ} ‚àÇ(ŒΩ a) = 0 := by
      suffices h_eq_zero :
          ‚àÄ x ‚àà t‚ÇÅ·∂ú, hf.toKernel f (a, x) {y : ‚Ñù | (x, y) ‚àà t‚ÇÅ √óÀ¢ t‚ÇÇ} = 0 by
        rw [set_lintegral_congr_fun ht‚ÇÅ.compl (eventually_of_forall h_eq_zero)]
        simp only [lintegral_const, zero_mul]
      intro a hat‚ÇÅ
      rw [mem_compl_iff] at hat‚ÇÅ
      simp only [hat‚ÇÅ, prod_mk_mem_set_prod_eq, false_and_iff, setOf_false, measure_empty]
    rw [h_eq1, h_eq2, add_zero]
    exact set_lintegral_toKernel_prod hf a ht‚ÇÅ ht‚ÇÇ
  ¬∑ intro t ht ht_eq
    calc ‚à´‚Åª x, hf.toKernel f (a, x) {y : ‚Ñù | (x, y) ‚àà t·∂ú} ‚àÇ(ŒΩ a)
      = ‚à´‚Åª x, hf.toKernel f (a, x) {y : ‚Ñù | (x, y) ‚àà t}·∂ú ‚àÇ(ŒΩ a) := rfl
    _ = ‚à´‚Åª x, hf.toKernel f (a, x) univ
          - hf.toKernel f (a, x) {y : ‚Ñù | (x, y) ‚àà t} ‚àÇ(ŒΩ a) := by
        congr with x : 1
        exact measure_compl (measurable_prod_mk_left ht)
          (measure_ne_top (hf.toKernel f (a, x)) _)
    _ = ‚à´‚Åª x, hf.toKernel f (a, x) univ ‚àÇ(ŒΩ a) -
          ‚à´‚Åª x, hf.toKernel f (a, x) {y : ‚Ñù | (x, y) ‚àà t} ‚àÇ(ŒΩ a) := by
        have h_le : (fun x ‚Ü¶ hf.toKernel f (a, x) {y : ‚Ñù | (x, y) ‚àà t})
              ‚â§·µê[ŒΩ a] fun x ‚Ü¶ hf.toKernel f (a, x) univ :=
          eventually_of_forall fun _ ‚Ü¶ measure_mono (subset_univ _)
        rw [lintegral_sub _ _ h_le]
        ¬∑ exact kernel.measurable_kernel_prod_mk_left' ht a
        refine ((lintegral_mono_ae h_le).trans_lt ?_).ne
        rw [lintegral_toKernel_univ hf]
        exact measure_lt_top _ univ
    _ = Œº a univ - Œº a t := by rw [ht_eq, lintegral_toKernel_univ hf]
    _ = Œº a t·∂ú := (measure_compl ht (measure_ne_top _ _)).symm
  ¬∑ intro f' hf_disj hf_meas hf_eq
    have h_eq : ‚àÄ a, {x | (a, x) ‚àà ‚ãÉ i, f' i} = ‚ãÉ i, {x | (a, x) ‚àà f' i} := by
      intro a; ext x; simp only [mem_iUnion, mem_setOf_eq]
    simp_rw [h_eq]
    have h_disj : ‚àÄ a, Pairwise (Disjoint on fun i ‚Ü¶ {x | (a, x) ‚àà f' i}) := by
      intro a i j hij
      have h_disj := hf_disj hij
      rw [Function.onFun, disjoint_iff_inter_eq_empty] at h_disj ‚ä¢
      ext1 x
      simp only [mem_inter_iff, mem_setOf_eq, mem_empty_iff_false, iff_false_iff]
      intro h_mem_both
      suffices (a, x) ‚àà ‚àÖ by rwa [mem_empty_iff_false] at this
      rwa [‚Üê h_disj, mem_inter_iff]
    calc ‚à´‚Åª x, hf.toKernel f (a, x) (‚ãÉ i, {y | (x, y) ‚àà f' i}) ‚àÇ(ŒΩ a)
      = ‚à´‚Åª x, ‚àë' i, hf.toKernel f (a, x) {y | (x, y) ‚àà f' i} ‚àÇ(ŒΩ a) := by
          congr with x : 1
          rw [measure_iUnion (h_disj x) fun i ‚Ü¶ measurable_prod_mk_left (hf_meas i)]
    _ = ‚àë' i, ‚à´‚Åª x, hf.toKernel f (a, x) {y | (x, y) ‚àà f' i} ‚àÇ(ŒΩ a) :=
          lintegral_tsum fun i ‚Ü¶ (kernel.measurable_kernel_prod_mk_left' (hf_meas i) a).aemeasurable
    _ = ‚àë' i, Œº a (f' i) := by simp_rw [hf_eq]
    _ = Œº a (iUnion f') := (measure_iUnion hf_disj hf_meas).symm

lemma kernel.eq_compProd_toKernel [IsFiniteKernel Œº] [IsSFiniteKernel ŒΩ]
    (hf : IsKernelCDF f Œº ŒΩ) :
    Œº = ŒΩ ‚äó‚Çñ hf.toKernel f := by
  ext a s hs
  rw [kernel.compProd_apply _ _ _ hs, lintegral_toKernel_mem hf a hs]

lemma ae_toKernel_eq_one [IsFiniteKernel Œº] [IsSFiniteKernel ŒΩ] (hf : IsKernelCDF f Œº ŒΩ) (a : Œ±)
    {s : Set ‚Ñù} (hs : MeasurableSet s) (hŒºs : Œº a {x | x.snd ‚àà s·∂ú} = 0) :
    ‚àÄ·µê t ‚àÇ(ŒΩ a), hf.toKernel f (a, t) s = 1 := by
  have h_eq : Œº = ŒΩ ‚äó‚Çñ hf.toKernel f := kernel.eq_compProd_toKernel hf
  have h : Œº a {x | x.snd ‚àà s·∂ú} = (ŒΩ ‚äó‚Çñ hf.toKernel f) a {x | x.snd ‚àà s·∂ú} := by
    rw [‚Üê h_eq]
  rw [hŒºs, kernel.compProd_apply] at h
  swap; ¬∑ exact measurable_snd hs.compl
  rw [eq_comm, lintegral_eq_zero_iff] at h
  swap
  ¬∑ simp only [mem_compl_iff, mem_setOf_eq]
    change Measurable ((fun p ‚Ü¶ hf.toKernel f p {c | c ‚àâ s}) ‚àò (fun b : Œ≤ ‚Ü¶ (a, b)))
    exact (kernel.measurable_coe _ hs.compl).comp measurable_prod_mk_left
  simp only [mem_compl_iff, mem_setOf_eq, kernel.prodMkLeft_apply'] at h
  filter_upwards [h] with t ht
  change hf.toKernel f (a, t) s·∂ú = 0 at ht
  rwa [prob_compl_eq_zero_iff hs] at ht

lemma measurableSet_toKernel_eq_one (hf : IsKernelCDF f Œº ŒΩ) {s : Set ‚Ñù} (hs : MeasurableSet s) :
    MeasurableSet {p | hf.toKernel f p s = 1} :=
  (kernel.measurable_coe _ hs) (measurableSet_singleton 1)

end

end ProbabilityTheory
