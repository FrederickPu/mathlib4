/-
Copyright (c) 2023 Xavier Roblot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Xavier Roblot
-/
import Mathlib.Data.Real.Pi.Bounds
import Mathlib.NumberTheory.NumberField.CanonicalEmbedding
import Mathlib.NumberTheory.NumberField.Norm
import Mathlib.RingTheory.Localization.NormTrace

import Mathlib.Sandbox

/-!
# Number field discriminant
This file defines the discriminant of a number field.

## Main definitions

* `NumberField.discr`: the absolute discriminant of a number field.

## Main result

* `NumberField.abs_discr_gt_two`: **Hermite-Minkowski Theorem**. A nontrivial number field has
nontrivial discriminant.

## Tags
number field, discriminant
-/

-- TODO. Rewrite some of the FLT results on the disciminant using the definitions and results of
-- this file

namespace NumberField

open Classical NumberField Matrix NumberField.InfinitePlace FiniteDimensional

open scoped Real nonZeroDivisors

variable (K : Type*) [Field K] [NumberField K]

/-- The absolute discriminant of a number field. -/
noncomputable abbrev discr : ‚Ñ§ := Algebra.discr ‚Ñ§ (RingOfIntegers.basis K)

theorem coe_discr : (discr K : ‚Ñö) = Algebra.discr ‚Ñö (integralBasis K) :=
  (Algebra.discr_localizationLocalization ‚Ñ§ _ K (RingOfIntegers.basis K)).symm

theorem discr_ne_zero : discr K ‚â† 0 := by
  rw [‚Üê (Int.cast_injective (Œ± := ‚Ñö)).ne_iff, coe_discr]
  exact Algebra.discr_not_zero_of_basis ‚Ñö (integralBasis K)

theorem discr_eq_discr {Œπ : Type*} [Fintype Œπ] [DecidableEq Œπ] (b : Basis Œπ ‚Ñ§ (ùìû K)) :
    Algebra.discr ‚Ñ§ b = discr K := by
  let b‚ÇÄ := Basis.reindex (RingOfIntegers.basis K) (Basis.indexEquiv (RingOfIntegers.basis K) b)
  rw [Algebra.discr_eq_discr (ùìû K) b b‚ÇÄ, Basis.coe_reindex, Algebra.discr_reindex]

theorem discr_eq_discr_of_algEquiv {L : Type*} [Field L] [NumberField L] (f : K ‚âÉ‚Çê[‚Ñö] L) :
    discr K = discr L := by
  let f‚ÇÄ : ùìû K ‚âÉ‚Çó[‚Ñ§] ùìû L := (f.restrictScalars ‚Ñ§).mapIntegralClosure.toLinearEquiv
  rw [‚Üê Rat.intCast_inj, coe_discr, Algebra.discr_eq_discr_of_algEquiv (integralBasis K) f,
    ‚Üê discr_eq_discr L ((RingOfIntegers.basis K).map f‚ÇÄ)]
  change _ = algebraMap ‚Ñ§ ‚Ñö _
  rw [‚Üê Algebra.discr_localizationLocalization ‚Ñ§ (nonZeroDivisors ‚Ñ§) L]
  congr
  ext
  simp only [Function.comp_apply, integralBasis_apply, Basis.localizationLocalization_apply,
    Basis.map_apply]
  rfl

open MeasureTheory MeasureTheory.Measure Zspan NumberField.mixedEmbedding
  NumberField.InfinitePlace ENNReal NNReal Complex

theorem _root_.NumberField.mixedEmbedding.volume_fundamentalDomain_latticeBasis :
    volume (fundamentalDomain (latticeBasis K)) =
      (2 : ‚Ñù‚â•0‚àû)‚Åª¬π ^ NrComplexPlaces K * sqrt ‚Äñdiscr K‚Äñ‚Çä := by
  let f : Module.Free.ChooseBasisIndex ‚Ñ§ (ùìû K) ‚âÉ (K ‚Üí+* ‚ÑÇ) :=
    (canonicalEmbedding.latticeBasis K).indexEquiv (Pi.basisFun ‚ÑÇ _)
  let e : (index K) ‚âÉ Module.Free.ChooseBasisIndex ‚Ñ§ (ùìû K) := (indexEquiv K).trans f.symm
  let M := (mixedEmbedding.stdBasis K).toMatrix ((latticeBasis K).reindex e.symm)
  let N := Algebra.embeddingsMatrixReindex ‚Ñö ‚ÑÇ (integralBasis K ‚àò f.symm)
    RingHom.equivRatAlgHom
  suffices M.map Complex.ofReal = (matrixToStdBasis K) *
      (Matrix.reindex (indexEquiv K).symm (indexEquiv K).symm N).transpose by
    calc volume (fundamentalDomain (latticeBasis K))
      _ = ‚Äñ((mixedEmbedding.stdBasis K).toMatrix ((latticeBasis K).reindex e.symm)).det‚Äñ‚Çä := by
        rw [‚Üê fundamentalDomain_reindex _ e.symm, ‚Üê norm_toNNReal, measure_fundamentalDomain
          ((latticeBasis K).reindex e.symm), volume_fundamentalDomain_stdBasis, mul_one]
        rfl
      _ = ‚Äñ(matrixToStdBasis K).det * N.det‚Äñ‚Çä := by
        rw [‚Üê nnnorm_real, ‚Üê ofReal_eq_coe, RingHom.map_det, RingHom.mapMatrix_apply, this,
          det_mul, det_transpose, det_reindex_self]
      _ = (2 : ‚Ñù‚â•0‚àû)‚Åª¬π ^ Fintype.card {w : InfinitePlace K // IsComplex w} * sqrt ‚ÄñN.det ^ 2‚Äñ‚Çä := by
        have : ‚ÄñComplex.I‚Äñ‚Çä = 1 := by rw [‚Üê norm_toNNReal, norm_eq_abs, abs_I, Real.toNNReal_one]
        rw [det_matrixToStdBasis, nnnorm_mul, nnnorm_pow, nnnorm_mul, this, mul_one, nnnorm_inv,
          coe_mul, ENNReal.coe_pow, ‚Üê norm_toNNReal, IsROrC.norm_two, Real.toNNReal_ofNat,
          coe_inv two_ne_zero, coe_ofNat, nnnorm_pow, NNReal.sqrt_sq]
      _ = (2 : ‚Ñù‚â•0‚àû)‚Åª¬π ^ Fintype.card { w // IsComplex w } * NNReal.sqrt ‚Äñdiscr K‚Äñ‚Çä := by
        rw [‚Üê Algebra.discr_eq_det_embeddingsMatrixReindex_pow_two, Algebra.discr_reindex,
          ‚Üê coe_discr, map_intCast, ‚Üê Complex.nnnorm_int]
  ext : 2
  dsimp only
  rw [Matrix.map_apply, Basis.toMatrix_apply, Basis.coe_reindex, Function.comp_apply,
    Equiv.symm_symm, latticeBasis_apply, ‚Üê commMap_canonical_eq_mixed, Complex.ofReal_eq_coe,
    stdBasis_repr_eq_matrixToStdBasis_mul K _ (fun _ => rfl)]
  rfl

theorem exists_ne_zero_mem_ideal_of_norm_le_mul_sqrt_discr (I : (FractionalIdeal (ùìû K)‚Å∞ K)À£) :
    ‚àÉ a ‚àà (I : FractionalIdeal (ùìû K)‚Å∞ K), a ‚â† 0 ‚àß
      |Algebra.norm ‚Ñö (a:K)| ‚â§ FractionalIdeal.absNorm I.1 * (4 / œÄ) ^ NrComplexPlaces K *
        (finrank ‚Ñö K).factorial / (finrank ‚Ñö K) ^ (finrank ‚Ñö K) * Real.sqrt |discr K| := by
  -- The smallest possible value for `exists_ne_zero_mem_ideal_of_norm_le`
  let B := (minkowskiBound K I * (convexBodySumFactor K)‚Åª¬π).toReal ^ (1 / (finrank ‚Ñö K : ‚Ñù))
  have h_le : (minkowskiBound K I) ‚â§ volume (convexBodySum K B) := by
    refine le_of_eq ?_
    rw [convexBodySum_volume, ‚Üê ENNReal.ofReal_pow (by positivity), ‚Üê Real.rpow_nat_cast,
      ‚Üê Real.rpow_mul toReal_nonneg, div_mul_cancel, Real.rpow_one, ofReal_toReal, mul_comm,
      mul_assoc, ENNReal.inv_mul_cancel (convexBodySumFactor_ne_zero K)
      (convexBodySumFactor_ne_top K), mul_one]
    ¬∑ exact mul_ne_top (ne_of_lt (minkowskiBound_lt_top K I))
        (ENNReal.inv_ne_top.mpr (convexBodySumFactor_ne_zero K))
    ¬∑ exact (Nat.cast_ne_zero.mpr (ne_of_gt finrank_pos))
  convert exists_ne_zero_mem_ideal_of_norm_le K I h_le
  rw [div_pow B, ‚Üê Real.rpow_nat_cast B, ‚Üê Real.rpow_mul (by positivity), div_mul_cancel _
    (Nat.cast_ne_zero.mpr <| ne_of_gt finrank_pos), Real.rpow_one, mul_comm_div, mul_div_assoc']
  congr 1
  rw [eq_comm]
  calc
    _ = FractionalIdeal.absNorm I.1 * (2:‚Ñù)‚Åª¬π ^ NrComplexPlaces K * sqrt ‚Äñdiscr K‚Äñ‚Çä *
          (2:‚Ñù) ^ finrank ‚Ñö K * ((2:‚Ñù) ^ NrRealPlaces K * (œÄ / 2) ^ NrComplexPlaces K /
            (Nat.factorial (finrank ‚Ñö K)))‚Åª¬π := by
      simp_rw [minkowskiBound, convexBodySumFactor,
        volume_fundamentalDomain_fractionalIdealLatticeBasis,
        volume_fundamentalDomain_latticeBasis, toReal_mul, toReal_inv, toReal_div, toReal_mul,
        coe_toReal, toReal_pow, toReal_inv, toReal_ofNat, mixedEmbedding.finrank, toReal_div,
        toReal_ofNat, coe_toReal, coe_real_pi, toReal_nat, mul_assoc]
      rw [ENNReal.toReal_ofReal (Rat.cast_nonneg.mpr (FractionalIdeal.absNorm_nonneg I.1))]
    _ = FractionalIdeal.absNorm I.1 * (2:‚Ñù) ^ (finrank ‚Ñö K - NrComplexPlaces K - NrRealPlaces K +
          NrComplexPlaces K : ‚Ñ§) * Real.sqrt ‚Äñdiscr K‚Äñ * Nat.factorial (finrank ‚Ñö K) *
            œÄ‚Åª¬π ^ (NrComplexPlaces K) := by
      simp_rw [inv_div, div_eq_mul_inv, mul_inv, ‚Üê zpow_neg_one, ‚Üê zpow_coe_nat, mul_zpow,
        ‚Üê zpow_mul, neg_one_mul, mul_neg_one, neg_neg, Real.coe_sqrt, coe_nnnorm, sub_eq_add_neg,
        zpow_add‚ÇÄ (two_ne_zero : (2:‚Ñù) ‚â† 0)]
      ring
    _ = FractionalIdeal.absNorm I.1 * (2:‚Ñù) ^ (2 * NrComplexPlaces K : ‚Ñ§) * Real.sqrt ‚Äñdiscr K‚Äñ *
          Nat.factorial (finrank ‚Ñö K) * œÄ‚Åª¬π ^ (NrComplexPlaces K) := by
      congr
      rw [‚Üê card_add_two_mul_card_eq_rank, Nat.cast_add, Nat.cast_mul, Nat.cast_ofNat]
      ring
    _ = FractionalIdeal.absNorm I.1 * (4 / œÄ) ^ NrComplexPlaces K * (finrank ‚Ñö K).factorial *
          Real.sqrt |discr K| := by
      rw [show ‚Äñdiscr K‚Äñ = |(discr K : ‚Ñù)| by rfl, zpow_mul, show (2:‚Ñù) ^ (2:‚Ñ§) = 4 by norm_cast,
        div_pow, inv_eq_one_div, div_pow, one_pow, zpow_coe_nat]
      ring

theorem exists_ne_zero_mem_ringOfIntegers_of_norm_le_mul_sqrt_discr :
    ‚àÉ (a : ùìû K), a ‚â† 0 ‚àß
      |Algebra.norm ‚Ñö (a:K)| ‚â§ (4 / œÄ) ^ NrComplexPlaces K *
        (finrank ‚Ñö K).factorial / (finrank ‚Ñö K) ^ (finrank ‚Ñö K) * Real.sqrt |discr K| := by
  obtain ‚ü®_, h_mem, h_nz, h_nm‚ü© := exists_ne_zero_mem_ideal_of_norm_le_mul_sqrt_discr K 1
  obtain ‚ü®a, rfl‚ü© := (FractionalIdeal.mem_one_iff _).mp h_mem
  refine ‚ü®a, ne_zero_of_map h_nz, ?_‚ü©
  simp_rw [Units.val_one, FractionalIdeal.absNorm_one, Rat.cast_one, one_mul] at h_nm
  exact h_nm

variable {K}

theorem abs_discr_ge (h : 1 < finrank ‚Ñö K) :
    (4 / 9 : ‚Ñù) * (3 * œÄ / 4) ^ finrank ‚Ñö K ‚â§ |discr K| := by
  -- We use `exists_ne_zero_mem_ringOfIntegers_of_norm_le_mul_sqrt_discr` to get a nonzero
  -- algebraic integer `x` of small norm and the fact that `1 ‚â§ |Norm x|` to get a lower bound
  -- on `sqrt |discr K|`.
  obtain ‚ü®x, h_nz, h_bd‚ü© := exists_ne_zero_mem_ringOfIntegers_of_norm_le_mul_sqrt_discr K
  have h_nm : (1:‚Ñù) ‚â§ |(Algebra.norm ‚Ñö) (x:K)| := by
    rw [‚Üê Algebra.coe_norm_int, ‚Üê Int.cast_one, ‚Üê Int.cast_abs, Rat.cast_coe_int, Int.cast_le]
    exact Int.one_le_abs (Algebra.norm_ne_zero_iff.mpr h_nz)
  replace h_bd := le_trans h_nm h_bd
  rw [‚Üê inv_mul_le_iff (by positivity), inv_div, mul_one, Real.le_sqrt (by positivity)
    (by positivity), ‚Üê Int.cast_abs, div_pow, mul_pow, ‚Üê pow_mul, ‚Üê pow_mul] at h_bd
  refine le_trans ?_ h_bd
  -- The sequence `a n` is a lower bound for `|discr K|`. We prove below by induction an uniform
  -- lower bound for this sequence from which we deduce the result.
  let a : ‚Ñï ‚Üí ‚Ñù := fun n => (n:‚Ñù) ^ (n * 2) / ((4 / œÄ) ^ n * (n.factorial:‚Ñù) ^ 2)
  suffices ‚àÄ n, 2 ‚â§ n ‚Üí (4 / 9 : ‚Ñù) * (3 * œÄ / 4) ^ n ‚â§ a n by
    refine le_trans (this (finrank ‚Ñö K) h) ?_
    simp only -- unfold `a` and beta-reduce
    gcongr
    ¬∑ exact (one_le_div Real.pi_pos).2 Real.pi_le_four
    ¬∑ rw [‚Üê card_add_two_mul_card_eq_rank, mul_comm]
      exact Nat.le_add_left _ _
  intro n hn
  induction n, hn using Nat.le_induction with
  | base => exact le_of_eq <| by norm_num [Nat.factorial_two]; field_simp; ring
  | succ m _ h_m =>
      suffices (3:‚Ñù) ‚â§ (1 + 1 / m : ‚Ñù) ^ (2 * m) by
        convert_to _ ‚â§ (a m) * (1 + 1 / m : ‚Ñù) ^ (2 * m) / (4 / œÄ)
        ¬∑ simp_rw [add_mul, one_mul, pow_succ, Nat.factorial_succ]
          field_simp; ring
        ¬∑ rw [_root_.le_div_iff (by positivity), pow_succ]
          convert (mul_le_mul h_m this (by positivity) (by positivity)) using 1
          field_simp; ring
      refine le_trans (le_of_eq (by field_simp; norm_num)) (one_add_mul_le_pow ?_ (2 * m))
      exact le_trans (by norm_num : (-2:‚Ñù) ‚â§ 0) (by positivity)

/-- **Hermite-Minkowski Theorem**. A nontrivial number field has nontrivial discriminant. -/
theorem abs_discr_gt_two (h : 1 < finrank ‚Ñö K) : 2 < |discr K| := by
  have : Algebra (ùìû K) K := by exact Subalgebra.toAlgebra (ùìû K)
  have h‚ÇÅ : 1 ‚â§ 3 * œÄ / 4 := by
    rw [_root_.le_div_iff (by positivity), ‚Üê _root_.div_le_iff' (by positivity), one_mul]
    linarith [Real.pi_gt_three]
  have h‚ÇÇ : (9:‚Ñù) < œÄ ^ 2 := by
    rw [ ‚Üê Real.sqrt_lt (by positivity) (by positivity), show Real.sqrt (9:‚Ñù) = 3 from
    (Real.sqrt_eq_iff_sq_eq (by positivity) (by positivity)).mpr (by norm_num)]
    exact Real.pi_gt_three
  refine Int.cast_lt.mp <| lt_of_lt_of_le ?_ (abs_discr_ge h)
  rw [‚Üê _root_.div_lt_iff' (by positivity), Int.int_cast_ofNat]
  refine lt_of_lt_of_le ?_ (pow_le_pow_right (n := 2) h‚ÇÅ h)
  rw [div_pow, _root_.lt_div_iff (by norm_num), mul_pow, show (2:‚Ñù) / (4 / 9) * 4 ^ 2 = 72 by
    norm_num, show (3:‚Ñù) ^ 2 = 9 by norm_num, ‚Üê _root_.div_lt_iff' (by positivity),
    show (72:‚Ñù) / 9 = 8 by norm_num]
  linarith [h‚ÇÇ]

section Hermite

open scoped Polynomial IntermediateField BigOperators

variable (A : Type*) [Field A] [CharZero A]

theorem aux1 (S : Set {F : IntermediateField ‚Ñö A // FiniteDimensional ‚Ñö F}) {T : Set A}
    (hT : T.Finite) (h : ‚àÄ F ‚àà S, ‚àÉ a ‚àà T, F = ‚Ñö‚üÆa‚üØ) :
    S.Finite := by
  rw [‚Üê Set.finite_coe_iff] at hT
  refine Set.finite_coe_iff.mp <| Finite.of_injective (Œ≤ := T) (fun ‚ü®F, hF‚ü© ‚Ü¶ ?_) ?_
  ¬∑ specialize h F hF
    exact ‚ü®h.choose, h.choose_spec.1‚ü©
  ¬∑ intro F‚ÇÅ F‚ÇÇ h_eq
    rw [Subtype.ext_iff_val, Subtype.ext_iff_val]
    convert congr_arg (‚Ñö‚üÆ¬∑‚üØ) (Subtype.mk_eq_mk.mp h_eq)
    all_goals exact (h _ (Subtype.mem _)).choose_spec.2

theorem aux2 (B : ‚Ñù‚â•0) (hB‚ÇÅ : 1 ‚â§ B) (hB : minkowskiBound K 1 < (convexBodyLTFactor K) * B)
    {w : InfinitePlace K} (hw : IsReal w) :
    ‚àÉ a ‚àà ùìû K, (‚àÄ z : InfinitePlace K, z a ‚â§ B) ‚àß ‚Ñö‚üÆ(a:K)‚üØ = ‚ä§ := by
  obtain ‚ü®g, h_gf, h_geq‚ü© := @adjust_f K  _ (fun _ => 1) _ w B (fun _ _ ‚Ü¶ by norm_num)
  obtain ‚ü®a, ha, h_nz, h_le‚ü© := exists_ne_zero_mem_ringOfIntegers_lt (f := g)
    (by rw [convexBodyLT_volume]; convert hB)
  have h_lt : ‚àÄ ‚¶Éz‚¶Ñ, z ‚â† w ‚Üí z a < 1 := fun z hz ‚Ü¶ by convert h_gf z hz ‚ñ∏ (h_le z)
  refine ‚ü®a, ha, fun z ‚Ü¶ ?_, ?_‚ü©
  ¬∑ refine le_of_lt ?_
    by_cases hz : z = w
    ¬∑ rw [hz, ‚Üê h_geq, NNReal.coe_prod, ‚Üê Finset.prod_erase_mul _ _ (Finset.mem_univ w),
        Finset.prod_congr rfl (fun z hz ‚Ü¶ by norm_num [h_gf z (Finset.mem_erase.mp hz).1]) (g := 1)]
      simp_rw [Pi.one_apply, Finset.prod_const_one, NNReal.coe_pow, one_mul, mult]
      split_ifs; norm_num [h_le w]
    ¬∑ exact lt_of_lt_of_le (h_lt hz) hB‚ÇÅ
  ¬∑ refine (Field.primitive_element_iff_algHom_eq_of_eval ‚Ñö ‚ÑÇ ?_ _ w.embedding.toRatAlgHom).mpr ?_
    ¬∑ exact fun x ‚Ü¶ IsAlgClosed.splits_codomain (minpoly ‚Ñö x)
    ¬∑ intro œà hœà
      suffices w = InfinitePlace.mk œà.toRingHom by
        rw [(mk_embedding w).symm, mk_eq_iff, conjugate_embedding_eq_of_isReal hw, or_self] at this
        ext x
        exact RingHom.congr_fun this x
      have h : 1 ‚â§ w (‚ü®a, ha‚ü©:(ùìû K)) := ge_one_of_lt_one (Subtype.ne_of_val_ne h_nz) h_lt
      contrapose! h
      convert h_lt h.symm using 1
      rw [‚Üê norm_embedding_eq]
      exact congr_arg (‚Äñ¬∑‚Äñ) hœà

theorem aux22 (B : ‚Ñù‚â•0) (hB‚ÇÅ : 1 ‚â§ B) {w : InfinitePlace K} (hw : IsComplex w)
    {f : InfinitePlace K ‚Üí ‚Ñù‚â•0}
    (hf : ‚àÄ z, z ‚â† w ‚Üí f z = 1)
    (hB : minkowskiBound K 1 < volume (convexBodyLT' K f ‚ü®w, hw‚ü©)) :
    ‚àÉ a ‚àà ùìû K, (‚àÄ z : InfinitePlace K, z a ‚â§ B) ‚àß ‚Ñö‚üÆ(a:K)‚üØ = ‚ä§ := by
  obtain ‚ü®a, ha, h_nz, h_le, h_w‚ü© := exists_ne_zero_mem_ringOfIntegers_lt' K ‚ü®w, hw‚ü© hB
  have h_lt : ‚àÄ ‚¶Éz‚¶Ñ, z ‚â† w ‚Üí z a < 1 := sorry
  refine ‚ü®a, ha, fun z ‚Ü¶ ?_, ?_‚ü©
  ¬∑ refine le_of_lt ?_
    by_cases hz : z = w
    ¬∑ sorry
    ¬∑ exact lt_of_lt_of_le (h_lt hz) hB‚ÇÅ
  ¬∑ refine (Field.primitive_element_iff_algHom_eq_of_eval ‚Ñö ‚ÑÇ ?_ _ w.embedding.toRatAlgHom).mpr ?_
    ¬∑ exact fun x ‚Ü¶ IsAlgClosed.splits_codomain (minpoly ‚Ñö x)
    ¬∑ intro œà hœà
      have : w = InfinitePlace.mk œà.toRingHom := by
        have h : 1 ‚â§ w (‚ü®a, ha‚ü©:(ùìû K)) := ge_one_of_lt_one (Subtype.ne_of_val_ne h_nz) h_lt
        contrapose! h
        convert h_lt h.symm using 1
        rw [‚Üê norm_embedding_eq]
        exact congr_arg (‚Äñ¬∑‚Äñ) hœà
      rw [(mk_embedding w).symm, mk_eq_iff] at this
      have := congr_arg RingHom.toRatAlgHom (this.resolve_right ?_)
      exact this
      have h : 1 ‚â§ w (‚ü®a, ha‚ü©:(ùìû K)) := ge_one_of_lt_one (Subtype.ne_of_val_ne h_nz) h_lt
      contrapose! h
      have := RingHom.congr_fun h a
      erw [‚Üê this] at hœà
      simp at hœà
      have t‚ÇÄ : (embedding w a).im = 0 := by exact conj_eq_iff_im.mp (id hœà.symm)
      dsimp only
      have : w a = Real.sqrt ((embedding w a).re ^ 2 + (embedding w a).im ^ 2) := by
        rw [‚Üê norm_embedding_eq]
        rw [‚Üê abs_add_mul_I]
        rw [Complex.norm_eq_abs]
        rw [re_add_im]
      rw [this, t‚ÇÄ, zero_pow, add_zero]
      rwa [Real.sqrt_sq_eq_abs]
      exact zero_lt_two



variable (N : ‚Ñï)

noncomputable def D : ‚Ñï :=
  Nat.ceil (max 1 (Real.log ((9 / 4 : ‚Ñù) * N) / Real.log (3 * œÄ / 4)))

theorem aux30 (hK : |discr K| ‚â§ N) : finrank ‚Ñö K ‚â§ D N := by
  sorry
  -- by_cases hN : 1 ‚â§ N
  -- ¬∑ obtain h | h := lt_or_le 1 (finrank ‚Ñö K)
  --   ¬∑ refine le_trans ?_ (le_max_right _ _)
  --     rw [_root_.le_div_iff', ‚Üê Real.exp_le_exp, ‚Üê Real.rpow_def_of_pos (by positivity),
  --       Real.exp_log (by positivity), ‚Üê inv_mul_le_iff (by positivity), inv_div, Real.rpow_nat_cast]
  --     ¬∑ exact le_trans (abs_discr_ge h) (Int.cast_le (Œ± := ‚Ñù).mpr hK)
  --     ¬∑ sorry
  --   ¬∑ have : finrank ‚Ñö K = 1 := sorry
  --     have : K ‚âÉ+* ‚Ñö := by
  --       let b := (finBasisOfFinrankEq ‚Ñö K this).repr
  --       sorry
  --     sorry
  -- ¬∑ sorry

set_option maxHeartbeats 600000 in
example {F : Type*} [Field F] [NumberField F] (hF : |discr F| ‚â§ N):
    minkowskiBound F 1 < convexBodyLTFactor F * (sqrt N * (2 : ‚Ñù‚â•0‚àû) ^ (D N)).toNNReal := by
  rw [minkowskiBound, convexBodyLTFactor, volume_fundamentalDomain_fractionalIdealLatticeBasis,
    Units.val_one, FractionalIdeal.absNorm_one, Rat.cast_one, ENNReal.ofReal_one, one_mul,
    mixedEmbedding.volume_fundamentalDomain_latticeBasis, mixedEmbedding.finrank,
    toNNReal_mul, toNNReal_pow, toNNReal_coe, coe_mul, ENNReal.coe_pow, coe_toNNReal two_ne_top]
  calc
    _ < (NNReal.sqrt ‚Äñdiscr F‚Äñ‚Çä : ‚Ñù‚â•0‚àû) * 2 ^ finrank ‚Ñö F := ?_
--    _ ‚â§ (NNReal.sqrt N) * 2 ^ finrank ‚Ñö F := ?_
    _ ‚â§ (NNReal.sqrt N) * 2 ^ D N := ?_
    _ < (2:‚Ñù‚â•0‚àû) ^ NrRealPlaces F * pi ^ NrComplexPlaces F * (‚Üë(sqrt N) * 2 ^ D N) := ?_
  ¬∑
    sorry
  ¬∑ gcongr
    ¬∑ rw [NNReal.sqrt_le_sqrt_iff]
      sorry
    ¬∑ exact one_le_two
    ¬∑ exact aux30 N hF
  ¬∑ sorry

attribute [-instance] IsDomain.toCancelCommMonoidWithZero IsDomain.toCancelMonoidWithZero

-- attribute [local instance 1001] Algebra.id

set_option trace.profiler true in
open Polynomial in
theorem main : {F : { F : IntermediateField ‚Ñö A // FiniteDimensional ‚Ñö F } |
      haveI :  NumberField F := @NumberField.mk _ _ inferInstance F.prop
      |discr F| ‚â§ N }.Finite := by
  let B := (sqrt N * (2 : ‚Ñù‚â•0‚àû) ^ (D N)).toNNReal
  let C := Nat.ceil (max B 1 ^ (D N) * Nat.choose (D N) ((D N) / 2))
  let T := {P : ‚Ñ§[X] | P.natDegree ‚â§ D ‚àß ‚àÄ i, |P.coeff i| ‚â§ C}
  have := bUnion_roots_finite (algebraMap ‚Ñ§ A) (D N) (Set.finite_Icc (-C : ‚Ñ§) C)
  refine aux1 A _ this ?_
  rintro ‚ü®F, hF‚ÇÅ‚ü© hF‚ÇÇ
  haveI : NumberField F := @NumberField.mk _ _ inferInstance hF‚ÇÅ
  obtain ‚ü®w, hw‚ü© : ‚àÉ w : InfinitePlace F, IsReal w := sorry
  have := aux2 B ?_ ?_ hw
  obtain ‚ü®a, ha, ha‚ÇÅ, ha‚ÇÇ‚ü© := this
  have h_minpoly := minpoly.isIntegrallyClosed_eq_field_fractions' ‚Ñö ha
  simp_rw [Set.mem_iUnion]
  refine ‚ü®a, ‚ü®?_, ?_‚ü©‚ü©
  ¬∑ refine ‚ü®minpoly ‚Ñ§ a, ?_‚ü©
    ¬∑ refine ‚ü®?_, ?_‚ü©
      ¬∑ refine ‚ü®?_, ?_‚ü©
        ¬∑ rw [Field.primitive_element_iff_minpoly_natDegree_eq] at ha‚ÇÇ
          rw [h_minpoly] at ha‚ÇÇ
          rw [Monic.natDegree_map] at ha‚ÇÇ
          ¬∑ rw [ha‚ÇÇ]
            refine aux30 _ hF‚ÇÇ
          ¬∑ exact minpoly.monic ha
        ¬∑ intro i
          rw [Set.mem_Icc, ‚Üê abs_le, ‚Üê @Int.cast_le ‚Ñù]
          have : ‚àÄ œÜ : F ‚Üí+* ‚ÑÇ, ‚ÄñœÜ a‚Äñ ‚â§ B := by
            intro œÜ
            exact ha‚ÇÅ (InfinitePlace.mk œÜ)
          refine (Eq.trans_le ?_ <| Embeddings.coeff_bdd_of_norm_le this i).trans ?_
          ¬∑ rw [h_minpoly, coeff_map, eq_intCast, Int.norm_cast_rat, Int.norm_eq_abs, Int.cast_abs]
          ¬∑ refine le_trans ?_ (Nat.le_ceil _)
            simp_rw [toNNReal_mul, toNNReal_coe, toNNReal_pow, NNReal.coe_mul, Real.coe_sqrt,
              NNReal.coe_nat_cast, NNReal.coe_pow, val_eq_coe]
            simp_rw [NNReal.coe_mul, NNReal.coe_pow, NNReal.coe_max]
            simp_rw [NNReal.coe_mul, Real.coe_sqrt, NNReal.coe_nat_cast, NNReal.coe_pow,
              NNReal.coe_one]
            gcongr
            ¬∑ exact le_max_right _ _
            ¬∑ exact aux30 N hF‚ÇÇ
            ¬∑ refine (Nat.choose_le_choose _ (aux30 N hF‚ÇÇ)).trans ?_
              exact Nat.choose_le_middle _ _
      ¬∑ refine mem_rootSet.mpr ‚ü®minpoly.ne_zero ha, ?_‚ü©
        rw [show (a:A) = algebraMap F A a by rfl]
        rw [aeval_algebraMap_eq_zero_iff]
        exact minpoly.aeval ‚Ñ§ a
  ¬∑ convert congr_arg (IntermediateField.map (IntermediateField.val F)) ha‚ÇÇ.symm
    ¬∑ rw [‚Üê AlgHom.fieldRange_eq_map, IntermediateField.fieldRange_val]
    ¬∑ rw [IntermediateField.adjoin_map, IntermediateField.coe_val, Set.image_singleton]
  ¬∑ sorry
  ¬∑ sorry
/-     rw [minkowskiBound, convexBodyLTFactor]
    rw [volume_fundamentalDomain_fractionalIdealLatticeBasis]
    rw [Units.val_one, FractionalIdeal.absNorm_one, Rat.cast_one]
    rw [ENNReal.ofReal_one, one_mul, mixedEmbedding.volume_fundamentalDomain_latticeBasis]
    simp_rw [finrank_prod, finrank_fintype_fun_eq_card, toNNReal_mul, toNNReal_coe, toNNReal_pow,
      coe_mul, ENNReal.coe_pow]
    simp only [ne_eq, two_ne_top, not_false_eq_true, coe_toNNReal, Real.coe_sqrt]
    sorry -/

end Hermite

end NumberField

namespace Rat

open NumberField

/-- The absolute discriminant of the number field `‚Ñö` is 1. -/
@[simp]
theorem numberField_discr : discr ‚Ñö = 1 := by
  let b : Basis (Fin 1) ‚Ñ§ (ùìû ‚Ñö) :=
    Basis.map (Basis.singleton (Fin 1) ‚Ñ§) ringOfIntegersEquiv.toAddEquiv.toIntLinearEquiv.symm
  calc NumberField.discr ‚Ñö
    _ = Algebra.discr ‚Ñ§ b := by convert (discr_eq_discr ‚Ñö b).symm
    _ = Algebra.trace ‚Ñ§ (ùìû ‚Ñö) (b default * b default) := by
      rw [Algebra.discr_def, Matrix.det_unique, Algebra.traceMatrix_apply, Algebra.traceForm_apply]
    _ = Algebra.trace ‚Ñ§ (ùìû ‚Ñö) 1 := by
      rw [Basis.map_apply, RingEquiv.toAddEquiv_eq_coe, AddEquiv.toIntLinearEquiv_symm,
        AddEquiv.coe_toIntLinearEquiv, Basis.singleton_apply,
        show (AddEquiv.symm ‚ÜëringOfIntegersEquiv) (1 : ‚Ñ§) = ringOfIntegersEquiv.symm 1 by rfl,
        map_one, mul_one]
    _ = 1 := by rw [Algebra.trace_eq_matrix_trace b]; norm_num

alias _root_.NumberField.discr_rat := numberField_discr

end Rat

variable {Œπ Œπ'} (K) [Field K] [DecidableEq Œπ] [DecidableEq Œπ'] [Fintype Œπ] [Fintype Œπ']

/-- If `b` and `b'` are `‚Ñö`-bases of a number field `K` such that
`‚àÄ i j, IsIntegral ‚Ñ§ (b.toMatrix b' i j)` and `‚àÄ i j, IsIntegral ‚Ñ§ (b'.toMatrix b i j)` then
`discr ‚Ñö b = discr ‚Ñö b'`. -/
theorem Algebra.discr_eq_discr_of_toMatrix_coeff_isIntegral [NumberField K]
    {b : Basis Œπ ‚Ñö K} {b' : Basis Œπ' ‚Ñö K} (h : ‚àÄ i j, IsIntegral ‚Ñ§ (b.toMatrix b' i j))
    (h' : ‚àÄ i j, IsIntegral ‚Ñ§ (b'.toMatrix b i j)) : discr ‚Ñö b = discr ‚Ñö b' := by
  replace h' : ‚àÄ i j, IsIntegral ‚Ñ§ (b'.toMatrix (b.reindex (b.indexEquiv b')) i j)
  ¬∑ intro i j
    convert h' i ((b.indexEquiv b').symm j)
-- Porting note: `simp; rfl` was `simpa`.
    simp; rfl
  classical
  rw [‚Üê (b.reindex (b.indexEquiv b')).toMatrix_map_vecMul b', discr_of_matrix_vecMul,
    ‚Üê one_mul (discr ‚Ñö b), Basis.coe_reindex, discr_reindex]
  congr
  have hint : IsIntegral ‚Ñ§ ((b.reindex (b.indexEquiv b')).toMatrix b').det :=
    IsIntegral.det fun i j => h _ _
  obtain ‚ü®r, hr‚ü© := IsIntegrallyClosed.isIntegral_iff.1 hint
  have hunit : IsUnit r := by
    have : IsIntegral ‚Ñ§ (b'.toMatrix (b.reindex (b.indexEquiv b'))).det :=
      IsIntegral.det fun i j => h' _ _
    obtain ‚ü®r', hr'‚ü© := IsIntegrallyClosed.isIntegral_iff.1 this
    refine' isUnit_iff_exists_inv.2 ‚ü®r', _‚ü©
    suffices algebraMap ‚Ñ§ ‚Ñö (r * r') = 1 by
      rw [‚Üê RingHom.map_one (algebraMap ‚Ñ§ ‚Ñö)] at this
      exact (IsFractionRing.injective ‚Ñ§ ‚Ñö) this
    rw [RingHom.map_mul, hr, hr', ‚Üê Matrix.det_mul,
      Basis.toMatrix_mul_toMatrix_flip, Matrix.det_one]
  rw [‚Üê RingHom.map_one (algebraMap ‚Ñ§ ‚Ñö), ‚Üê hr]
  cases' Int.isUnit_iff.1 hunit with hp hm
  ¬∑ simp [hp]
  ¬∑ simp [hm]
#align algebra.discr_eq_discr_of_to_matrix_coeff_is_integral Algebra.discr_eq_discr_of_toMatrix_coeff_isIntegral
