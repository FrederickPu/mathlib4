/-
Copyright (c) 2023 Xavier Roblot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Xavier Roblot
-/
import Mathlib.Data.Real.Pi.Bounds
import Mathlib.NumberTheory.NumberField.CanonicalEmbedding
import Mathlib.NumberTheory.NumberField.Norm
import Mathlib.RingTheory.Localization.NormTrace

/-!
# Number field discriminant
This file defines the discriminant of a number field.

## Main definitions

* `NumberField.discr`: the absolute discriminant of a number field.

## Main result

* `NumberField.abs_discr_gt_two`: **Hermite-Minkowski Theorem**. A nontrivial number field has
nontrivial discriminant.

## Tags
number field, discriminant
-/

-- TODO. Rewrite some of the FLT results on the disciminant using the definitions and results of
-- this file

namespace NumberField

open Classical NumberField Matrix NumberField.InfinitePlace FiniteDimensional

open scoped Real nonZeroDivisors

variable (K : Type*) [Field K] [NumberField K]

/-- The absolute discriminant of a number field. -/
noncomputable abbrev discr : ‚Ñ§ := Algebra.discr ‚Ñ§ (RingOfIntegers.basis K)

theorem coe_discr : (discr K : ‚Ñö) = Algebra.discr ‚Ñö (integralBasis K) :=
  (Algebra.discr_localizationLocalization ‚Ñ§ _ K (RingOfIntegers.basis K)).symm

theorem discr_ne_zero : discr K ‚â† 0 := by
  rw [‚Üê (Int.cast_injective (Œ± := ‚Ñö)).ne_iff, coe_discr]
  exact Algebra.discr_not_zero_of_basis ‚Ñö (integralBasis K)

theorem discr_eq_discr {Œπ : Type*} [Fintype Œπ] [DecidableEq Œπ] (b : Basis Œπ ‚Ñ§ (ùìû K)) :
    Algebra.discr ‚Ñ§ b = discr K := by
  let b‚ÇÄ := Basis.reindex (RingOfIntegers.basis K) (Basis.indexEquiv (RingOfIntegers.basis K) b)
  rw [Algebra.discr_eq_discr (ùìû K) b b‚ÇÄ, Basis.coe_reindex, Algebra.discr_reindex]

theorem discr_eq_discr_of_algEquiv {L : Type*} [Field L] [NumberField L] (f : K ‚âÉ‚Çê[‚Ñö] L) :
    discr K = discr L := by
  let f‚ÇÄ : ùìû K ‚âÉ‚Çó[‚Ñ§] ùìû L := (f.restrictScalars ‚Ñ§).mapIntegralClosure.toLinearEquiv
  rw [‚Üê Rat.intCast_inj, coe_discr, Algebra.discr_eq_discr_of_algEquiv (integralBasis K) f,
    ‚Üê discr_eq_discr L ((RingOfIntegers.basis K).map f‚ÇÄ)]
  change _ = algebraMap ‚Ñ§ ‚Ñö _
  rw [‚Üê Algebra.discr_localizationLocalization ‚Ñ§ (nonZeroDivisors ‚Ñ§) L]
  congr
  ext
  simp only [Function.comp_apply, integralBasis_apply, Basis.localizationLocalization_apply,
    Basis.map_apply]
  rfl

open MeasureTheory MeasureTheory.Measure Zspan NumberField.mixedEmbedding
  NumberField.InfinitePlace ENNReal NNReal Complex

theorem _root_.NumberField.mixedEmbedding.volume_fundamentalDomain_latticeBasis :
    volume (fundamentalDomain (latticeBasis K)) =
      (2 : ‚Ñù‚â•0‚àû)‚Åª¬π ^ NrComplexPlaces K * sqrt ‚Äñdiscr K‚Äñ‚Çä := by
  let f : Module.Free.ChooseBasisIndex ‚Ñ§ (ùìû K) ‚âÉ (K ‚Üí+* ‚ÑÇ) :=
    (canonicalEmbedding.latticeBasis K).indexEquiv (Pi.basisFun ‚ÑÇ _)
  let e : (index K) ‚âÉ Module.Free.ChooseBasisIndex ‚Ñ§ (ùìû K) := (indexEquiv K).trans f.symm
  let M := (mixedEmbedding.stdBasis K).toMatrix ((latticeBasis K).reindex e.symm)
  let N := Algebra.embeddingsMatrixReindex ‚Ñö ‚ÑÇ (integralBasis K ‚àò f.symm)
    RingHom.equivRatAlgHom
  suffices M.map Complex.ofReal = (matrixToStdBasis K) *
      (Matrix.reindex (indexEquiv K).symm (indexEquiv K).symm N).transpose by
    calc volume (fundamentalDomain (latticeBasis K))
      _ = ‚Äñ((mixedEmbedding.stdBasis K).toMatrix ((latticeBasis K).reindex e.symm)).det‚Äñ‚Çä := by
        rw [‚Üê fundamentalDomain_reindex _ e.symm, ‚Üê norm_toNNReal, measure_fundamentalDomain
          ((latticeBasis K).reindex e.symm), volume_fundamentalDomain_stdBasis, mul_one]
        rfl
      _ = ‚Äñ(matrixToStdBasis K).det * N.det‚Äñ‚Çä := by
        rw [‚Üê nnnorm_real, ‚Üê ofReal_eq_coe, RingHom.map_det, RingHom.mapMatrix_apply, this,
          det_mul, det_transpose, det_reindex_self]
      _ = (2 : ‚Ñù‚â•0‚àû)‚Åª¬π ^ Fintype.card {w : InfinitePlace K // IsComplex w} * sqrt ‚ÄñN.det ^ 2‚Äñ‚Çä := by
        have : ‚ÄñComplex.I‚Äñ‚Çä = 1 := by rw [‚Üê norm_toNNReal, norm_eq_abs, abs_I, Real.toNNReal_one]
        rw [det_matrixToStdBasis, nnnorm_mul, nnnorm_pow, nnnorm_mul, this, mul_one, nnnorm_inv,
          coe_mul, ENNReal.coe_pow, ‚Üê norm_toNNReal, IsROrC.norm_two, Real.toNNReal_ofNat,
          coe_inv two_ne_zero, coe_ofNat, nnnorm_pow, NNReal.sqrt_sq]
      _ = (2 : ‚Ñù‚â•0‚àû)‚Åª¬π ^ Fintype.card { w // IsComplex w } * NNReal.sqrt ‚Äñdiscr K‚Äñ‚Çä := by
        rw [‚Üê Algebra.discr_eq_det_embeddingsMatrixReindex_pow_two, Algebra.discr_reindex,
          ‚Üê coe_discr, map_intCast, ‚Üê Complex.nnnorm_int]
  ext : 2
  dsimp only
  rw [Matrix.map_apply, Basis.toMatrix_apply, Basis.coe_reindex, Function.comp_apply,
    Equiv.symm_symm, latticeBasis_apply, ‚Üê commMap_canonical_eq_mixed, Complex.ofReal_eq_coe,
    stdBasis_repr_eq_matrixToStdBasis_mul K _ (fun _ => rfl)]
  rfl


section Hermite

open scoped Polynomial IntermediateField BigOperators

variable (A : Type*) [Field A] [CharZero A]

-- theorem aux1 (S : Set { F : IntermediateField ‚Ñö A // FiniteDimensional ‚Ñö F }) {T : Set ‚Ñö[X]}
--     (hT : T.Finite) (h : ‚àÄ F ‚àà S, ‚àÉ P ‚àà T, ‚àÉ a : A, a ‚àà Polynomial.rootSet P A ‚àß F = ‚Ñö‚üÆa‚üØ) :
--     S.Finite := by
--   let R := ‚ãÉ P ‚àà T, Polynomial.rootSet P A
--   have : Finite R := by
--     rw [Set.finite_coe_iff]
--     refine Set.Finite.biUnion hT ?_
--     intro P _
--     exact Polynomial.rootSet_finite P A
--   let f : S ‚Üí R := by
--     intro K
--     have : K.val ‚àà S := by exact Subtype.mem K
--     have ex := h K (Subtype.mem K)
--     have hPS := ex.choose_spec.1
--     let a := ex.choose_spec.2.choose
--     have ha‚ÇÅ := ex.choose_spec.2.choose_spec.1
--     refine ‚ü®a, ?_‚ü©
--     refine Set.mem_biUnion hPS ha‚ÇÅ
--   have : Function.Injective f := by
--     intro F F' hf
--     have exF := h F (Subtype.mem F)
--     have tF := exF.choose_spec.2.choose_spec.2
--     have exF' := h F' (Subtype.mem F')
--     have tF' := exF'.choose_spec.2.choose_spec.2
--     have : exF.choose_spec.2.choose = exF'.choose_spec.2.choose := by
--       rwa [Subtype.mk_eq_mk] at hf
--     rwa [this, ‚Üê tF', Subtype.val_inj, Subtype.val_inj] at tF
--   rw [‚Üê Set.finite_coe_iff]
--   refine Finite.of_injective f this

theorem aux2 {B : ‚Ñù‚â•0} (hB‚ÇÇ : minkowskiBound K < (convexBodyLtFactor K) * B)
    {w : InfinitePlace K} (hw : IsReal w) :
    ‚àÉ a : ùìû K, (‚àÄ z :InfinitePlace K, z a ‚â§ max 1 B) ‚àß ‚Ñö‚üÆ(a:K)‚üØ = ‚ä§ := by
  let f : InfinitePlace K ‚Üí ‚Ñù‚â•0 := fun _ => 1
  have : ‚àÄ z, z ‚â† w ‚Üí f z ‚â† 0 := sorry
  obtain ‚ü®g, h_geqf, h_gprod‚ü© := adjust_f K B this
  obtain ‚ü®a, h_anz, h_ale‚ü© := exists_ne_zero_mem_ringOfIntegers_lt (f := g)
    (by rw [convexBodyLt_volume]; convert hB‚ÇÇ)
  have h_gew  : 1 ‚â§ w a := by
    have h_nm : (1:‚Ñù) ‚â§ |(Algebra.norm ‚Ñö) (a:K)| := by
      rw [‚Üê Algebra.coe_norm_int, ‚Üê Int.cast_one, ‚Üê Int.cast_abs, Rat.cast_coe_int, Int.cast_le]
      exact Int.one_le_abs (Algebra.norm_ne_zero_iff.mpr h_anz)
    contrapose! h_nm
    rw [‚Üê InfinitePlace.prod_eq_abs_norm]
    have : (1:‚Ñù) = ‚àè w : InfinitePlace K, 1 := by
      simp only [Finset.prod_const_one]
    rw [this]
    refine Finset.prod_lt_prod_of_nonempty ?_ ?_ ?_
    ¬∑ intro w' _
      refine pow_pos ?_ _
      rw [InfinitePlace.pos_iff]
      rwa [ne_eq, ZeroMemClass.coe_eq_zero]
    ¬∑ intro w' _
      refine pow_lt_one ?_ ?_ ?_
      exact map_nonneg _ _
      by_cases hw' : w' = w
      ¬∑ rwa [hw']
      ¬∑ have := h_geqf w' hw' ‚ñ∏ (h_ale w')
        exact this
      ¬∑ rw [mult]; split_ifs; norm_num; exact two_ne_zero
    exact Finset.univ_nonempty
  refine ‚ü®a, ?_, ?_‚ü©
  ¬∑ sorry
  ¬∑ let œÜ := w.embedding.toRatAlgHom
    have hœÜ : w = InfinitePlace.mk œÜ.toRingHom := by
      exact (InfinitePlace.mk_embedding w).symm
    rw [Field.primitive_element_iff_algHom_eq_of_eval ‚Ñö ‚ÑÇ ?_ (a:K) œÜ]
    intro œà hœà
    let w' := InfinitePlace.mk œà.toRingHom
    have h1 : w' a = w a := by
      rw [‚Üê InfinitePlace.norm_embedding_eq w, show w' a = ‚Äñœà a‚Äñ by rfl, ‚Üê hœà]
      sorry
    have h2 : w' = w := by
      by_contra h2
      have := h_geqf w' h2 ‚ñ∏ (h_ale w')
      rw [h1] at this
      rw [lt_iff_not_le] at this
      exact this h_gew
    rw [hœÜ, eq_comm, InfinitePlace.mk_eq_iff] at h2
    rw [ComplexEmbedding.isReal_iff.mp, or_self] at h2
    exact congr_arg RingHom.toRatAlgHom h2
    erw [‚Üê InfinitePlace.isReal_iff]
    exact hw
    exact fun x ‚Ü¶ IsAlgClosed.splits_codomain (minpoly ‚Ñö x)
variable (N : ‚Ñï)

theorem aux30 (hK : |discr K| ‚â§ N) :
    finrank ‚Ñö K ‚â§ max 1 (Real.log ((9 / 4 : ‚Ñù) * N) / Real.log (3 * œÄ / 4)) := by
  by_cases hN : 1 ‚â§ N
  ¬∑ obtain h | h := lt_or_le 1 (finrank ‚Ñö K)
    ¬∑ refine le_trans ?_ (le_max_right _ _)
      rw [_root_.le_div_iff', ‚Üê Real.exp_le_exp, ‚Üê Real.rpow_def_of_pos (by positivity),
        Real.exp_log (by positivity), ‚Üê inv_mul_le_iff (by positivity), inv_div, Real.rpow_nat_cast]
      ¬∑ exact le_trans (abs_discr_ge K h) (Int.cast_le (Œ± := ‚Ñù).mpr hK)
      ¬∑ sorry
    ¬∑ have : finrank ‚Ñö K = 1 := sorry
      have : K ‚âÉ+* ‚Ñö := by
        let b := (finBasisOfFinrankEq ‚Ñö K this).repr
        sorry
      sorry
  ¬∑ sorry

-- FIXME: make this more general
theorem aux3 : ‚àÉ D : ‚Ñï, ‚àÄ F ‚àà {F : { F : IntermediateField ‚Ñö A // FiniteDimensional ‚Ñö F } |
    haveI :  NumberField F := @NumberField.mk _ _ inferInstance F.prop
    |discr F| ‚â§ N }, finrank ‚Ñö F ‚â§ D := by
  sorry

theorem aux4 : ‚àÉ B : ‚Ñù‚â•0, ‚àÄ F ‚àà {F : { F : IntermediateField ‚Ñö A // FiniteDimensional ‚Ñö F } |
      haveI :  NumberField F := @NumberField.mk _ _ inferInstance F.prop
      |discr F| ‚â§ N },
    haveI :  NumberField F := @NumberField.mk _ _ inferInstance F.prop
    minkowskiBound F < (convexBodyLtFactor F) * B := sorry

example : {F : { F : IntermediateField ‚Ñö A // FiniteDimensional ‚Ñö F } |
      haveI :  NumberField F := @NumberField.mk _ _ inferInstance F.prop
      |discr F| ‚â§ N }.Finite := by
  let S := { F : { F : IntermediateField ‚Ñö A // FiniteDimensional ‚Ñö F } |
      haveI :  NumberField F := @NumberField.mk _ _ inferInstance F.prop
      |discr F| ‚â§ N }
  obtain ‚ü®D, hD‚ü© := aux3 A N
  have ex := aux4 A N
  let B := ex.choose
  have hB := ex.choose_spec
  let C := Nat.ceil (max B 1 ^ D * D.choose (D / 2)) -- Use a sup?
  let R := (‚ãÉ (P : ‚Ñ§[X]) (_ : P.natDegree ‚â§ D ‚àß ‚àÄ i, P.coeff i ‚àà Set.Icc (-C:‚Ñ§) C),
      ((P.map (algebraMap ‚Ñ§ A)).roots.toFinset.toSet : Set A))
  have hR : Finite R := by
    rw [Set.finite_coe_iff]
    refine Polynomial.bUnion_roots_finite _ _ <| Set.finite_Icc _ _
  have h_gen : ‚àÄ F ‚àà S, ‚àÉ Œ± ‚àà R, ‚Ñö‚üÆŒ±‚üØ = F := by
      intro F hF
      have : NumberField F := @NumberField.mk _ _ inferInstance F.prop
      by_cases hw : ‚àÉ w : InfinitePlace F, IsReal w
      ¬∑ obtain ‚ü®w, hw‚ü© := hw
        have := aux2 F (hB F hF) hw
        obtain ‚ü®Œ±, hŒ±‚ü© := this
        have h_minpoly  : minpoly ‚Ñö (Œ±:F.val) =
              Polynomial.map (algebraMap ‚Ñ§ ‚Ñö) (minpoly ‚Ñ§ (Œ±:F.val)) := by
          refine minpoly.isIntegrallyClosed_eq_field_fractions' (R := ‚Ñ§) (K := ‚Ñö) (S := F.val) ?_
          exact Œ±.prop
        refine ‚ü®?_, ?_, ?_‚ü©
        use (Œ±:F.val)
        let P := minpoly ‚Ñ§ (Œ±:F.val)
        rw [Set.mem_iUnion]
        refine ‚ü®P, ?_‚ü©
        rw [Set.mem_iUnion]
        refine ‚ü®‚ü®?_, ?_‚ü©, ?_‚ü©
        ¬∑ have : Polynomial.natDegree (minpoly ‚Ñ§ (Œ±:F.val)) =
              Polynomial.natDegree (minpoly ‚Ñö (Œ±:F.val)) := by
            rw [h_minpoly]
            refine (Polynomial.Monic.natDegree_map ?_ _).symm
            refine minpoly.monic ?_
            exact Œ±.prop
          rw [this]
          refine le_trans (minpoly.natDegree_le _) ?_
          exact hD F hF
        ¬∑ intro i
          rw [Set.mem_Icc, ‚Üê abs_le, ‚Üê @Int.cast_le ‚Ñù]
          have := (InfinitePlace.le_iff_le _ _).mp hŒ±.1
          have := Embeddings.coeff_bdd_of_norm_le this i
          refine (Eq.trans_le ?_ <| le_trans this ?_).trans (Nat.le_ceil _)
          ¬∑ rw [h_minpoly, Polynomial.coeff_map, eq_intCast, Int.norm_cast_rat, Int.norm_eq_abs,
            Int.cast_abs]
          ¬∑ sorry
        ¬∑ refine Polynomial.mem_rootSet.mpr ‚ü®minpoly.ne_zero ?_, ?_‚ü©
          ¬∑ exact Œ±.prop
          ¬∑ have := minpoly.aeval ‚Ñ§ (Œ±:A)
            convert this
            change P = minpoly ‚Ñ§ (algebraMap F A (Œ±:F.val))
            refine (minpoly.algebraMap_eq ?_ _).symm
            exact NoZeroSMulDivisors.algebraMap_injective _ A
        ¬∑ convert congr_arg IntermediateField.lift hŒ±.2
          ¬∑ rw [IntermediateField.lift_adjoin, Set.image_singleton]
          ¬∑ exact (IntermediateField.lift_top _ _).symm
      ¬∑ sorry
  rw [‚Üê Set.finite_coe_iff]
  refine Finite.of_injective (Œ≤ := R) ?_ ?_
  ¬∑ intro F
    have ex := h_gen F F.prop
    let a := ex.choose
    have := ex.choose_spec.1
    exact ‚ü®a, this‚ü©
  ¬∑ intro F F' hf
    have exF := h_gen F F.prop
    have tF := exF.choose_spec.2
    have exF' := h_gen F' F'.prop
    have tF' := exF'.choose_spec.2
    have : exF.choose = exF'.choose := by
      rwa [Subtype.mk_eq_mk] at hf
    rwa [‚Üê this, tF, Subtype.val_inj, Subtype.val_inj] at tF'

end Hermite

end NumberField

namespace Rat

open NumberField

/-- The absolute discriminant of the number field `‚Ñö` is 1. -/
@[simp]
theorem numberField_discr : discr ‚Ñö = 1 := by
  let b : Basis (Fin 1) ‚Ñ§ (ùìû ‚Ñö) :=
    Basis.map (Basis.singleton (Fin 1) ‚Ñ§) ringOfIntegersEquiv.toAddEquiv.toIntLinearEquiv.symm
  calc NumberField.discr ‚Ñö
    _ = Algebra.discr ‚Ñ§ b := by convert (discr_eq_discr ‚Ñö b).symm
    _ = Algebra.trace ‚Ñ§ (ùìû ‚Ñö) (b default * b default) := by
      rw [Algebra.discr_def, Matrix.det_unique, Algebra.traceMatrix_apply, Algebra.traceForm_apply]
    _ = Algebra.trace ‚Ñ§ (ùìû ‚Ñö) 1 := by
      rw [Basis.map_apply, RingEquiv.toAddEquiv_eq_coe, AddEquiv.toIntLinearEquiv_symm,
        AddEquiv.coe_toIntLinearEquiv, Basis.singleton_apply,
        show (AddEquiv.symm ‚ÜëringOfIntegersEquiv) (1 : ‚Ñ§) = ringOfIntegersEquiv.symm 1 by rfl,
        map_one, mul_one]
    _ = 1 := by rw [Algebra.trace_eq_matrix_trace b]; norm_num

alias _root_.NumberField.discr_rat := numberField_discr

end Rat

variable {Œπ Œπ'} (K) [Field K] [DecidableEq Œπ] [DecidableEq Œπ'] [Fintype Œπ] [Fintype Œπ']

/-- If `b` and `b'` are `‚Ñö`-bases of a number field `K` such that
`‚àÄ i j, IsIntegral ‚Ñ§ (b.toMatrix b' i j)` and `‚àÄ i j, IsIntegral ‚Ñ§ (b'.toMatrix b i j)` then
`discr ‚Ñö b = discr ‚Ñö b'`. -/
theorem Algebra.discr_eq_discr_of_toMatrix_coeff_isIntegral [NumberField K]
    {b : Basis Œπ ‚Ñö K} {b' : Basis Œπ' ‚Ñö K} (h : ‚àÄ i j, IsIntegral ‚Ñ§ (b.toMatrix b' i j))
    (h' : ‚àÄ i j, IsIntegral ‚Ñ§ (b'.toMatrix b i j)) : discr ‚Ñö b = discr ‚Ñö b' := by
  replace h' : ‚àÄ i j, IsIntegral ‚Ñ§ (b'.toMatrix (b.reindex (b.indexEquiv b')) i j)
  ¬∑ intro i j
    convert h' i ((b.indexEquiv b').symm j)
-- Porting note: `simp; rfl` was `simpa`.
    simp; rfl
  classical
  rw [‚Üê (b.reindex (b.indexEquiv b')).toMatrix_map_vecMul b', discr_of_matrix_vecMul,
    ‚Üê one_mul (discr ‚Ñö b), Basis.coe_reindex, discr_reindex]
  congr
  have hint : IsIntegral ‚Ñ§ ((b.reindex (b.indexEquiv b')).toMatrix b').det :=
    IsIntegral.det fun i j => h _ _
  obtain ‚ü®r, hr‚ü© := IsIntegrallyClosed.isIntegral_iff.1 hint
  have hunit : IsUnit r := by
    have : IsIntegral ‚Ñ§ (b'.toMatrix (b.reindex (b.indexEquiv b'))).det :=
      IsIntegral.det fun i j => h' _ _
    obtain ‚ü®r', hr'‚ü© := IsIntegrallyClosed.isIntegral_iff.1 this
    refine' isUnit_iff_exists_inv.2 ‚ü®r', _‚ü©
    suffices algebraMap ‚Ñ§ ‚Ñö (r * r') = 1 by
      rw [‚Üê RingHom.map_one (algebraMap ‚Ñ§ ‚Ñö)] at this
      exact (IsFractionRing.injective ‚Ñ§ ‚Ñö) this
    rw [RingHom.map_mul, hr, hr', ‚Üê Matrix.det_mul,
      Basis.toMatrix_mul_toMatrix_flip, Matrix.det_one]
  rw [‚Üê RingHom.map_one (algebraMap ‚Ñ§ ‚Ñö), ‚Üê hr]
  cases' Int.isUnit_iff.1 hunit with hp hm
  ¬∑ simp [hp]
  ¬∑ simp [hm]
#align algebra.discr_eq_discr_of_to_matrix_coeff_is_integral Algebra.discr_eq_discr_of_toMatrix_coeff_isIntegral
